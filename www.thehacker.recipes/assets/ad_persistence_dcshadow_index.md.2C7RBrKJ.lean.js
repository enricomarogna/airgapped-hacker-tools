import{_ as c,c as d,a5 as l,G as s,w as o,B as i,o as h,j as e,a}from"./chunks/framework.B5CpDqM0.js";const p="/assets/Adding%20entry%20to%20Configuration%20container.CnrSht85.png",u="/assets/Modifying%20the%20workstation%20SPN.C1qjLJGt.png",m="/assets/DRSUAPI%20network%20capture.HoC5c3xi.png",g="/assets/overview.CXphsHrO.png",y=JSON.parse('{"title":"DC Shadow","description":"They told me I could be anything I wanted ... So I became a domain controller","frontmatter":{"description":"They told me I could be anything I wanted ... So I became a domain controller","authors":"ShutdownRepo"},"headers":[],"relativePath":"ad/persistence/dcshadow/index.md","filePath":"ad/persistence/dcshadow/index.md","lastUpdated":1724982529000}'),w={name:"ad/persistence/dcshadow/index.md"};function b(f,t,k,C,S,T){const n=i("PluginTabsTab"),r=i("PluginTabs");return h(),d("div",null,[t[2]||(t[2]=l('<h1 id="dc-shadow" tabindex="-1">DC Shadow <a class="header-anchor" href="#dc-shadow" aria-label="Permalink to &quot;DC Shadow&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>The idea behind this persistence technique is to have an attacker-controlled machine act as a domain controller (shadow DC) to push changes onto the domain by forcing other domain controllers to replicate.</p><p>There are two requirements for a machine to act as a domain controller:</p><ol><li>Be registered as a DC in the domain**: this is done by; <ol><li>modifying the computer&#39;s SPN (<code>ServicePrincipalName</code>) to <code>GC/$HOSTNAME.$DOMAIN/$DOMAIN</code></li><li>adding an entry like <code>CN=$HOSTNAME,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=$DOMAIN</code> with the following attribute values: <ul><li><code>objectClass: server</code></li><li><code>dNSHostName: $HOSTNAME.$DOMAIN</code></li><li><code>serverReference: CN=$HOSTNAME,CN=Computers,DC=$DOMAIN</code></li></ul></li></ol></li><li>Be able to request and/or respond to specific RPC calls: <code>DRSBind</code>, <code>DRSUnbind</code>, <code>DRSCrackNames,</code> <code>DRSAddEntry</code>, <code>DRSReplicaAdd</code>, <code>DRSReplicaDel</code>, <code>DRSGetNCChanges</code>.</li></ol><p>Below is the attack workflow (step 1 &amp; 2 can be switched if need be):</p><ol><li>Register the workstation that will act as the shadow DC <ol><li>add the required entry in <code>CN=Configuration</code></li><li>modify the workstation&#39;s SPN</li></ol></li><li>Prepare the changes to be pushed onto the domain (with calls to <code>DRSAddEntry</code>)</li><li>Push the changes by forcing another legitimate DC to replicate from the workstation with a <code>DRSReplicaAdd</code> call, which automatically makes a <code>DRSGetNCChanges</code> call from the legitimate DC to the shadow DC.</li><li>Unregister the workstation so it is not longer considered to be a DC (by a <code>DRSReplicaDel</code> call and by reverting changes made to <code>CN=Configuration</code> and the workstation&#39;s SPN).</li></ol><p><img src="'+p+'" alt=""></p><div class="caption">(step 1.1) add the entry to <code>CN=Configuration</code></div><p><img src="'+u+'" alt=""></p><p class="caption">(step 1.2) modify the workstation&#39;s SPN</p><p><img src="'+m+'" alt=""></p><p class="caption">An example of DRSUAPI traffic for a successful DC Shadow attack</p><p>It is important to note that this technique can be used as a &quot;meta&quot; one, in the sense that it permits to use other persistence techniques, such as <a href="./../sid-history">SID history</a> , <a href="./../kerberos/delegation-to-krbtgt">Delegation to KRBTGT</a> and even <a href="./../dacl">DACL abuse</a>.</p><p>For instance, a DC Shadow attack can be conducted to register a controlled workstation as a domain controller, and then use that to push changes to the domain that would expose it to DACL abuse.</p><p><img src="'+g+'" alt=""></p><p class="caption">&quot;leHack 2023 - Un conseil, brûlez tout&quot; by Charlie Bromberg and Volker Carstein&quot;</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2>',18)),s(r,null,{default:o(()=>[s(n,{label:"UNIX-like"},{default:o(()=>t[0]||(t[0]=[e("div",{class:"caution custom-block"},[e("p",null,[e("em",null,"July 27th 2023"),a(" : There is currently no way to exploit this technique purely from a distant UNIX-like machine, as it requires some tools that have yet to be made.")])],-1)])),_:1}),s(n,{label:"Windows"},{default:o(()=>t[1]||(t[1]=[e("p",null,"DC Shadow can be performed by using Mimikatz. It works in every 64-bits Windows Server version up to 2022 (included). Everything happens on the workstation that will act as the shadow DC.",-1),e("p",null,"Two Mimikatz shells are required:",-1),e("ul",null,[e("li",null,"one with domain admin privileges (called the trigger shell from now on)"),e("li",null,[a("one as "),e("code",null,"NT-AUTHORITY\\SYSTEM"),a(" (called the RPC shell from now on)")])],-1),e("h3",{id:"preparing-shells",tabindex:"-1"},[a("Preparing shells "),e("a",{class:"header-anchor",href:"#preparing-shells","aria-label":'Permalink to "Preparing shells"'},"​")],-1),e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"# In a mimikatz shell, launched with DA rights")]),a(`
`),e("span",{class:"line"},[e("span",null,"# This will be the trigger shell")]),a(`
`),e("span",{class:"line"},[e("span",null,"privilege::debug")]),a(`
`),e("span",{class:"line"},[e("span")]),a(`
`),e("span",{class:"line"},[e("span",null,"# The following command will open a new mimikatz shell as NT-AUTHORITY\\SYSTEM")]),a(`
`),e("span",{class:"line"},[e("span",null,"# This will be the RPC shell")]),a(`
`),e("span",{class:"line"},[e("span",null,"process::runp")]),a(`
`),e("span",{class:"line"},[e("span")]),a(`
`),e("span",{class:"line"},[e("span",null,"# On both shell, run the following command to confirm permissions")]),a(`
`),e("span",{class:"line"},[e("span",null,"# On the trigger shell, it will return the domain admin account name (used to lauch the first mimikatz shell)")]),a(`
`),e("span",{class:"line"},[e("span",null,"# On the RPC shell, it will return NT-AUTHORITY\\SYSTEM")]),a(`
`),e("span",{class:"line"},[e("span",null,"token::whoami")])])])],-1),e("h3",{id:"preparing-changes-to-push",tabindex:"-1"},[a("Preparing changes to push "),e("a",{class:"header-anchor",href:"#preparing-changes-to-push","aria-label":'Permalink to "Preparing changes to push"'},"​")],-1),e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"# (RPC shell)")]),a(`
`),e("span",{class:"line"},[e("span",null,"lsadump::dcshadow /object:ObjectToModify /attribute:AttributeToModifyOnTargetedObject /value:NewValueOfTargetedAttribute")])])])],-1),e("h3",{id:"pushing-changes",tabindex:"-1"},[a("Pushing changes "),e("a",{class:"header-anchor",href:"#pushing-changes","aria-label":'Permalink to "Pushing changes"'},"​")],-1),e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"# (Trigger shell)")]),a(`
`),e("span",{class:"line"},[e("span",null,"# The command below will register the shadow DC, push the changes, and unregister")]),a(`
`),e("span",{class:"line"},[e("span",null,"lsadump::dcshadow /push")])])])],-1),e("p",null,[a("See the "),e("a",{href:"https://tools.thehacker.recipes/mimikatz/modules/lsadump/dcshadow",target:"_blank",rel:"noreferrer"},[e("code",null,"lsadump::dcshadow")]),a(" at The Hacker Tools for more info.")],-1)])),_:1})]),_:1}),t[3]||(t[3]=l('<h2 id="talk" tabindex="-1">Talk <a class="header-anchor" href="#talk" aria-label="Permalink to &quot;Talk&quot;">​</a></h2><p><a href="../../.gitbook/assets/LeHack%202023%20-%20Un%20conseil,%20brulez%20tout.pdf">LeHack 2023 - Un conseil, brulez tout.pdf</a></p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://www.dcshadow.com/" target="_blank" rel="noreferrer">https://www.dcshadow.com/</a></p><p><a href="https://tools.thehacker.recipes/mimikatz/modules/lsadump/dcshadow" target="_blank" rel="noreferrer">https://tools.thehacker.recipes/mimikatz/modules/lsadump/dcshadow</a></p><p><a href="https://stealthbits.com/blog/creating-persistence-dcshadow/" target="_blank" rel="noreferrer">https://stealthbits.com/blog/creating-persistence-dcshadow/</a></p><p><a href="https://blog.netwrix.com/2022/09/28/dcshadow_attack/" target="_blank" rel="noreferrer">https://blog.netwrix.com/2022/09/28/dcshadow_attack/</a></p><p><a href="https://www.netwrix.com/how_dcshadow_persistence_attack_works.html" target="_blank" rel="noreferrer">https://www.netwrix.com/how_dcshadow_persistence_attack_works.html</a></p><p><a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/d2435927-0999-4c62-8c6d-13ba31a52e1a" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/d2435927-0999-4c62-8c6d-13ba31a52e1a</a></p><p><a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-drsr/f977faaa-673e-4f66-b9bf-48c640241d47" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-drsr/f977faaa-673e-4f66-b9bf-48c640241d47</a></p>',10))])}const N=c(w,[["render",b]]);export{y as __pageData,N as default};
