import{_ as a,c as r,a5 as t,o}from"./chunks/framework.B5CpDqM0.js";const u=JSON.parse('{"title":"Shadow Principals (PAM)","description":"","frontmatter":{"authors":"Pri3st, ShutdownRepo"},"headers":[],"relativePath":"ad/persistence/shadow-principals.md","filePath":"ad/persistence/shadow-principals.md","lastUpdated":1724982529000}'),s={name:"ad/persistence/shadow-principals.md"};function i(n,e,d,c,l,p){return o(),r("div",null,e[0]||(e[0]=[t('<h1 id="shadow-principals-pam" tabindex="-1">Shadow Principals (PAM) <a class="header-anchor" href="#shadow-principals-pam" aria-label="Permalink to &quot;Shadow Principals (PAM)&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>When a Bastion Forest is compromised, there are multiple ways to obtain persistence on the forest it manages (i.e. called &quot;Production Forest&quot; here).</p><ol><li>Mark a low-privilege user from the Production Forest as an Shadow Security Principal in the Bastion Forest</li><li>Modify a Shadow Principal Object&#39;s DACL: add ACEs over a Shadow Principal Object (at least <code>Read Members</code> and <code>Write Members</code>) allowing a controlled user add and remove principals at will (in the <code>member</code> attribute.</li></ol><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://www.labofapenetrationtester.com/2019/04/abusing-PAM.html" target="_blank" rel="noreferrer">https://www.labofapenetrationtester.com/2019/04/abusing-PAM.html</a></p><p><a href="https://posts.specterops.io/not-a-security-boundary-breaking-forest-trusts-cd125829518d" target="_blank" rel="noreferrer">https://posts.specterops.io/not-a-security-boundary-breaking-forest-trusts-cd125829518d</a></p>',7)]))}const m=a(s,[["render",i]]);export{u as __pageData,m as default};
