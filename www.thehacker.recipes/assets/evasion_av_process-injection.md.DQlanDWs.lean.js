import{_ as a,c as s,a5 as t,o as i}from"./chunks/framework.B5CpDqM0.js";const m=JSON.parse('{"title":"üõ†Ô∏è Process injection","description":"This technique aims at increasing privilege and/or escaping the protections applied to the processes","frontmatter":{"description":"This technique aims at increasing privilege and/or escaping the protections applied to the processes","authors":"Jenaye, ShutdownRepo"},"headers":[],"relativePath":"evasion/av/process-injection.md","filePath":"evasion/av/process-injection.md","lastUpdated":1725525074000}'),r={name:"evasion/av/process-injection.md"};function n(o,e,c,p,l,h){return i(),s("div",null,e[0]||(e[0]=[t(`<h1 id="üõ†Ô∏è-process-injection" tabindex="-1">üõ†Ô∏è Process injection <a class="header-anchor" href="#üõ†Ô∏è-process-injection" aria-label="Permalink to &quot;üõ†Ô∏è Process injection&quot;">‚Äã</a></h1><div class="warning custom-block"><p>This is a work-in-progress. It&#39;s indicated with the üõ†Ô∏è emoji in the page name or in the category name. Wanna help? Please reach out to me: <a href="https://twitter.com/_nwodtuhs" target="_blank" rel="noreferrer">@_nwodtuhs</a></p></div><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>Instead of simply executing the shellcode, it has become common to find tricks to hide its active load. The classic schema looks like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// encrypt the shellcode </span></span>
<span class="line"><span> encrypt(ciphered, SHELLCODE, SHELLCODE_LENGTH, KEY);</span></span>
<span class="line"><span>// decrypt + handoff </span></span>
<span class="line"><span> decrypt(deciphered, ciphered, SHELLCODE_LENGTH, KEY); </span></span>
<span class="line"><span> handoff(deciphered, SHELLCODE_LENGTH);</span></span></code></pre></div><blockquote><p>After the malicious code is injected into a legitimate process, attackers also can access legitimate processes&#39; resources such as process memory, system/network resources, and elevated privileges</p><p>picussecurity.com</p></blockquote><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><p>Process injection exists in many forms, often based on legitimate services.</p><p>The techniques mainly used are :</p><ul><li><a href="https://thehackernews.com/2017/12/malware-process-doppelganging.html" target="_blank" rel="noreferrer">Process Doppelganging</a></li><li><a href="https://www.ired.team/offensive-security/code-injection-process-injection/dll-injection" target="_blank" rel="noreferrer">Dll injection</a></li><li><a href="https://damonmohammadbagher.medium.com/bypassing-anti-virus-by-creating-remote-thread-into-target-process-45f145b2ac7a" target="_blank" rel="noreferrer">CRT</a></li></ul><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">‚Äã</a></h2><p>all these methods and many others are also described in Ired&#39;s article : <a href="https://www.ired.team/offensive-security/code-injection-process-injection" target="_blank" rel="noreferrer">https://www.ired.team/offensive-security/code-injection-process-injection</a></p><p><a href="https://www.cyberbit.com/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/" target="_blank" rel="noreferrer">https://www.cyberbit.com/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/</a></p>`,13)]))}const u=a(r,[["render",n]]);export{m as __pageData,u as default};
