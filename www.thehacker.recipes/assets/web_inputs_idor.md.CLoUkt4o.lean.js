import{_ as t,c as r,a5 as a,o}from"./chunks/framework.B5CpDqM0.js";const p=JSON.parse('{"title":"IDOR (Insecure Direct Object Reference)","description":"","frontmatter":{"authors":"ShutdownRepo"},"headers":[],"relativePath":"web/inputs/idor.md","filePath":"web/inputs/idor.md","lastUpdated":1724982529000}'),s={name:"web/inputs/idor.md"};function i(n,e,c,l,d,h){return o(),r("div",null,e[0]||(e[0]=[a('<h1 id="idor-insecure-direct-object-reference" tabindex="-1">IDOR (Insecure Direct Object Reference) <a class="header-anchor" href="#idor-insecure-direct-object-reference" aria-label="Permalink to &quot;IDOR (Insecure Direct Object Reference)&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>When web applications badly implement access objects directly (files, database objetcs) with user-supplied inputs, they can be vulnerable to Insecure Direct Object Reference (IDOR) allowing attackers to access unauthorized resources.</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><p>Testers need to identify input vectors (parts of the app that accept content from the users) that could be used for direct object reference like:</p><ul><li><a href="http://some.website/account?id=**13984**" target="_blank" rel="noreferrer">http://some.website/account?id=**13984**</a></li><li><a href="http://some.website/assets/**c29tZXBkZi5wZGY%3D**" target="_blank" rel="noreferrer">http://some.website/assets/**c29tZXBkZi5wZGY%3D**</a></li></ul><p>In order to test IDOR vulnerabilities, testers can follow two methodologies that depend on the context:</p><ul><li>Testers can have accounts on the web app: <ul><li>access different objects from two accounts</li><li>then save the values</li><li>then try to access an user&#39;s object from another user</li></ul></li><li>They can&#39;t have accounts on the web app: try to access other user&#39;s objects by <ul><li>randomly changing the parameters</li><li>identifyinf integer values that increment/decrement depending on the referenced object</li><li>identifying string values that are encoded (hex, base64) depending on the referenced object</li></ul></li></ul><h3 id="idor-to-self-xss" tabindex="-1">IDOR to self-XSS <a class="header-anchor" href="#idor-to-self-xss" aria-label="Permalink to &quot;IDOR to self-XSS&quot;">​</a></h3><p>While self-XSS are usually out-of-scope in bug bounty programs, and considered impactless in pentest engagements, combining an IDOR to a self-XSS can be impactful when triggering a self-XSS on another user. That is possible when there is an IDOR vulnerability when editing user&#39;s non-public info that can trigger an XSS.</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://enciphers.com/insecure-direct-object-reference-a-modern-age-sqli/" target="_blank" rel="noreferrer">https://enciphers.com/insecure-direct-object-reference-a-modern-age-sqli/</a></p><p><a href="https://portswigger.net/web-security/access-control/idor" target="_blank" rel="noreferrer">https://portswigger.net/web-security/access-control/idor</a></p><p><a href="https://www.bugcrowd.com/blog/how-to-find-idor-insecure-direct-object-reference-vulnerabilities-for-large-bounty-rewards/" target="_blank" rel="noreferrer">https://www.bugcrowd.com/blog/how-to-find-idor-insecure-direct-object-reference-vulnerabilities-for-large-bounty-rewards/</a></p>',14)]))}const b=t(s,[["render",i]]);export{p as __pageData,b as default};
