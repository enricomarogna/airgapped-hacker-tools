import{_ as t,c as a,a5 as r,o as i}from"./chunks/framework.B5CpDqM0.js";const f=JSON.parse('{"title":"CSRF (Cross-Site Request Forgery)","description":"","frontmatter":{"authors":"ShutdownRepo"},"headers":[],"relativePath":"web/inputs/csrf.md","filePath":"web/inputs/csrf.md","lastUpdated":1724982529000}'),o={name:"web/inputs/csrf.md"};function s(n,e,c,l,h,d){return i(),a("div",null,e[0]||(e[0]=[r('<h1 id="csrf-cross-site-request-forgery" tabindex="-1">CSRF (Cross-Site Request Forgery) <a class="header-anchor" href="#csrf-cross-site-request-forgery" aria-label="Permalink to &quot;CSRF (Cross-Site Request Forgery)&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>A Cross-Site Request Forgery (a.k.a. CSRF, pronounced &quot;C surf&quot;&#39;, a.k.a. XSRF) allows an attacker to force a user make HTTP requests in order to execute unwanted actions like:</p><ul><li>Regular users: transferring funds, changing the email address and other actions that could leak to account takeover (ATO)</li><li>Administrators: administrative actions on the web site that could lead to a full takeover</li></ul><p>Victims can be triggered when browsing:</p><ul><li>a malicious website containing client-side code making the browser send the requests</li><li>a legitimate website altered by an attacker (XSS vulnerable inputs, unrestricted file upload or any other attack allowing an attacker to add or edit a website content)</li></ul><p>People tend to mix up <a href="./xss">XSS</a> and CSRF attacks. XSS make user&#39;s browser execute client-side code (e.g. JavaScript) whereas CSRF make user&#39;s browser send HTTP requests.</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><h3 id="verifying-inputs" tabindex="-1">Verifying inputs <a class="header-anchor" href="#verifying-inputs" aria-label="Permalink to &quot;Verifying inputs&quot;">​</a></h3><p>First of all, testers need to find insecure input vectors that allow client-side code (like JS) injection, just like XSS. This part will not be further detailed as it already is in the following page.</p><div class="tip custom-block"><p>Read the <a href="./xss">XSS</a> article for more insight</p></div><h3 id="verifying-actions" tabindex="-1">Verifying actions <a class="header-anchor" href="#verifying-actions" aria-label="Permalink to &quot;Verifying actions&quot;">​</a></h3><p>One of the most efficient and common CSRF protection is the usage of an anti-CSRF token. It works like this:</p><ol><li>A user logs in a website and gets a session cookie</li><li>While browsing he decides to transfer funds and goes the transfer page</li><li>The page contains a form where the user indicates the amount and beneficiary of the transfer</li><li>The form also contains a hidden random token, that only the user browsing the page can know</li><li>This token is sent along with the other values of the form when submitting</li><li>The server can verify the authenticity of the token and proceeds to execute the action requested</li></ol><p>With this protection, CSRF attacks attempts would fail since the attacker would have no way of knowing the unique and random token needed along with the action request.</p><p>Another protection is asking users to confirm when asking for any action. This can be done with a CAPTCHA.</p><p>Testers need to make sure that actions are protected with an anti-CSRF token, a CAPTCHA, or any other efficient mitigation.</p><div class="tip custom-block"><p>Secret cookies, using POST instead of GET and URL rewriting are not efficient mitigations.</p></div><p>The tool <a href="https://github.com/0xInfection/XSRFProbe" target="_blank" rel="noreferrer">XSRFProbe</a> (Python) is an advanced audit and exploitation toolkit that can help testers find and exploit CSRFs.</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://owasp.org/www-community/attacks/csrf" target="_blank" rel="noreferrer">https://owasp.org/www-community/attacks/csrf</a></p><p><a href="https://openclassrooms.com/fr/courses/2091901-protegez-vous-efficacement-contre-les-failles-web/2863569-la-csrf" target="_blank" rel="noreferrer">https://openclassrooms.com/fr/courses/2091901-protegez-vous-efficacement-contre-les-failles-web/2863569-la-csrf</a></p><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/CSRF%20Injection" target="_blank" rel="noreferrer">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/CSRF%20Injection</a></p>',23)]))}const p=t(o,[["render",s]]);export{f as __pageData,p as default};
