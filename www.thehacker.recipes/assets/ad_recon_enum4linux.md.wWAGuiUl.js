import{_ as a,c as r,a5 as n,o as i}from"./chunks/framework.B5CpDqM0.js";const u=JSON.parse('{"title":"enum4linux ⚙️","description":"","frontmatter":{"authors":"ShutdownRepo, sckdev"},"headers":[],"relativePath":"ad/recon/enum4linux.md","filePath":"ad/recon/enum4linux.md","lastUpdated":1724982529000}'),t={name:"ad/recon/enum4linux.md"};function s(l,e,o,c,p,h){return i(),r("div",null,e[0]||(e[0]=[n('<h1 id="enum4linux-⚙️" tabindex="-1">enum4linux ⚙️ <a class="header-anchor" href="#enum4linux-⚙️" aria-label="Permalink to &quot;enum4linux ⚙️&quot;">​</a></h1><p>The Perl script <a href="https://github.com/CiscoCXSecurity/enum4linux" target="_blank" rel="noreferrer">enum4linux.pl</a> is a powerful tool able to operate recon techniques for <a href="./ldap">LDAP</a>, <a href="./nbt-ns">NBT-NS</a> and <a href="./ms-rpc">MS-RPC</a>. It&#39;s an alternative to a similar program named <a href="https://packetstormsecurity.com/files/download/31882/enum.tar.gz" target="_blank" rel="noreferrer">enum.exe</a> (C++) created for Windows systems. Lately, a rewrite of enum4linux in Python has surfaced, called <a href="https://github.com/cddmp/enum4linux-ng" target="_blank" rel="noreferrer">enum4linux-ng.py</a>. The enum4linux scripts are mainly wrappers around the Samba tools <a href="https://www.samba.org/samba/docs/current/man-html/nmblookup.1.html" target="_blank" rel="noreferrer">nmblookup</a>, <a href="https://www.samba.org/samba/docs/current/man-html/net.8.html" target="_blank" rel="noreferrer">net</a>, <a href="https://www.samba.org/samba/docs/current/man-html/rpcclient.1.html" target="_blank" rel="noreferrer">rpcclient</a> and <a href="https://www.samba.org/samba/docs/current/man-html/smbclient.1.html" target="_blank" rel="noreferrer">smbclient</a>.</p><p>The following techniques can be operated.</p><ul><li>Service &amp; port scan (for LDAP(S), SMB, NetBIOS, MS-RPC)</li><li>NetBIOS names and workgroup (via <a href="./nbt-ns">reverse lookup</a>)</li><li>SMB dialects checks (SMBv1 only or SMBv1 and higher)</li><li>RPC sessions checks (checks if the user creds supplied are valid or if <a href="./ms-rpc#null-sessions">null session</a> works)</li><li>Domain information via LDAP (find out whether host is a parent or child DC)</li><li>Domain information via RPC (<a href="./ms-rpc#recon-through-interesting-named-pipes">via SMB named pipe</a> <code>\\pipe\\lsarpc</code> for MS-RPC)</li><li>OS information via RPC (<a href="./ms-rpc#recon-through-interesting-named-pipes">via SMB named pipe</a> <code>\\pipe\\srvsvc</code> for MS-RPC)</li><li>Users, groups, shares, policies, printers, services via RPC</li><li>Users, groups and machines via <a href="./ms-rpc#rid-cycling">RID cycling</a></li><li>SMB Share names bruteforcing</li></ul><p>All of the techniques mentioned above (except RID cycling) will be operated when running the following command.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enum4linux-ng.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TARGET_IP</span></span></code></pre></div><p>RID cycling can be enabled with the <code>-R</code> option.</p>',7)]))}const d=a(t,[["render",s]]);export{u as __pageData,d as default};
