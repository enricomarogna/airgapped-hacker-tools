import{_ as t}from"./chunks/Pass the things (dark).CprrsTzs.js";import{_ as a,c as o,a5 as r,o as s}from"./chunks/framework.B5CpDqM0.js";const f=JSON.parse('{"title":"NTLM","description":"","frontmatter":{"authors":"CryingWelkin, ShutdownRepo, sckdev"},"headers":[],"relativePath":"ad/movement/ntlm/index.md","filePath":"ad/movement/ntlm/index.md","lastUpdated":1724982529000}'),i={name:"ad/movement/ntlm/index.md"};function n(h,e,d,l,c,p){return s(),o("div",null,e[0]||(e[0]=[r('<h1 id="ntlm" tabindex="-1">NTLM <a class="header-anchor" href="#ntlm" aria-label="Permalink to &quot;NTLM&quot;">â€‹</a></h1><p><img src="'+t+'" alt=""></p><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">â€‹</a></h2><div class="warning custom-block"><p>A common error people do is mix LM, NT, NTLM, Net-NTLM etc. Let&#39;s make things clear. There are hashing formats used to store user passwords: LM, NT. And there are authentication protocols used to authenticate users to remote resources: LM, NTLMv1, and NTLMv2.</p><ul><li>LM hash and NT hash will refer to the hashing formats</li><li>LM, NTLM(v1), and NTLMv2, will refer to the authentication protocols</li><li>LMv1 and LMv2 are response formats that clients return when responding to NTLM_CHALLENGE NTLMv1 and NTLMv2 messages, respectively.</li></ul><p>Yes.. this is confusing, but hey go tell this to Microsoft ðŸ˜¤</p></div><p>The LM (LAN Manager) and NTLM (New Technology LM) authentication protocols are widely used in today&#39;s Microsoft environments (but mostly NTLM). It relies on a challenge-response scheme based on three messages to authenticate. In order to prove its identity, the authenticating client is asked to compute a response based on multiple variables including:</p><ul><li>a random challenge sent by the server in a <code>CHALLENGE_MESSAGE</code></li><li>a secret key that is the hash of the user&#39;s password</li></ul><p>The following table details the secret key used by each authentication protocols and the cryptographic algorithm used to compute the response (<a href="https://blog.gentilkiwi.com/securite/mimikatz/overpass-the-hash" target="_blank" rel="noreferrer">source</a>).</p><table tabindex="0"><thead><tr><th>Authentication protocol</th><th>Algorithm (for the protocol)</th><th>Secret key</th></tr></thead><tbody><tr><td>LM</td><td>DES-ECB</td><td>LM hash</td></tr><tr><td>NTLM</td><td>DES-ECB</td><td>NT hash</td></tr><tr><td>NTLMv2</td><td>HMAC-MD5</td><td>NT hash</td></tr></tbody></table><p>The following table details the hashing algorithm used by each hashing format in Windows that allows the system to transform the user&#39;s password in a non-reversible format.</p><table tabindex="0"><thead><tr><th>Hashing format</th><th>Algorithm (for the hash)</th></tr></thead><tbody><tr><td>LM hash</td><td>based on DES (<a href="http://techgenix.com/how-cracked-windows-password-part1/" target="_blank" rel="noreferrer">learn more</a>)</td></tr><tr><td>NT hash</td><td>MD4</td></tr></tbody></table><p>This is meant to protect the user&#39;s password from eavesdropping by implementing the &quot;zero-knowledge proof&quot; concept. Attackers <a href="./capture">capturing authentication</a> (during a man-in-the-middle attack for example) would not be able to use the response to authenticate. In theory, they could only try to retrieve the user&#39;s password from an NTLM hash by operating two expensive (in time and resources) <a href="./">bruteforce attacks</a>:</p><ul><li>a bruteforce attack against the LM/NTLM response to retrieve the LM or NT hash it was derivated from</li><li>if found, a bruteforce/dictionary attack against the NT hash to retrieve the user&#39;s password</li></ul><div class="tip custom-block"><p>Read the <a href="./capture">capture.md</a> article for more insight</p></div><div class="tip custom-block"><p>Read the <a href="./../credentials/cracking">cracking.md</a> article for more insight</p></div><p>The problem is that Microsoft has poorly implemented the zero-knowledge proof concept in the LM and NTLM protocols. The LM or NT hash is used &quot;as is&quot; to compute the response. This means an attacker knowing an LM or NT hash could use it to authenticate as a user without knowing the user&#39;s password. This technique is called <a href="./pth">Pass the hash</a>.</p><div class="tip custom-block"><p>Read the <a href="./pth">pth.md</a> article for more insight</p></div><p>Attackers could also rely on <a href="./../mitm-and-coerced-authentications/index">forced authentications and phishing</a> to <a href="./relay">relay incoming authentications</a>.</p><div class="tip custom-block"><p>Read the <a href="./../mitm-and-coerced-authentications/index">mitm-and-coerced-authentications</a> article for more insight</p></div><div class="tip custom-block"><p>Read the <a href="./relay">relay.md</a> article for more insight</p></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">â€‹</a></h2><p><a href="http://davenport.sourceforge.net/ntlm.html" target="_blank" rel="noreferrer">http://davenport.sourceforge.net/ntlm.html</a></p><p><a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/b38c36ed-2804-4868-a9ff-8dd3182128e4" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/b38c36ed-2804-4868-a9ff-8dd3182128e4</a></p>',22)]))}const g=a(i,[["render",n]]);export{f as __pageData,g as default};
