import{_ as o,c as k,a5 as l,G as e,w as t,B as h,o as p,j as i,a as s}from"./chunks/framework.B5CpDqM0.js";const E=JSON.parse('{"title":"WPS","description":"","frontmatter":{"authors":"ShutdownRepo, joker2a"},"headers":[],"relativePath":"radio/wi-fi/wps/index.md","filePath":"radio/wi-fi/wps/index.md","lastUpdated":1724982529000}'),d={name:"radio/wi-fi/wps/index.md"};function c(g,a,u,F,y,C){const n=h("PluginTabsTab"),r=h("PluginTabs");return p(),k("div",null,[a[2]||(a[2]=l('<h1 id="wps" tabindex="-1">WPS <a class="header-anchor" href="#wps" aria-label="Permalink to &quot;WPS&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>Wi-Fi Protected Setup (WPS) is a simplified configuration protocol designed to make connecting devices to a secure wireless network easier. WPS employs an 8-digit PIN for user network connection, verifying the first 4 digits before proceeding to check the remaining 4. This allows for a potential Brute-Force attack on the first set of digits followed by the second set, with a total of only 11,000 possible combinations.</p><div class="tip custom-block"><p>Initially it&#39;s 20k possible combinations (10^8 =100.000.000 to 10^4+10^4=20.000) but as the 8th digit of the PIN is always a checksum of digit one to digit seven, there are at most (10^4 +10^3=11.000) attempts needed to find the correct PIN.</p></div><p>Below are some known attacks on Wi-Fi Protected Setup (WPS):</p><ul><li>PIN Brute-Force: Some routers with WPS allow users to connect by entering an 8-digit PIN code. A brute-force attack involves trying all possible combinations until the correct PIN is found.</li><li>Pixie Dust: This attack exploits a weakness in the generation of WPS encryption keys. It involves exploiting vulnerabilities in certain routers during the creation of WPA/WPA2 encryption keys.</li><li>PIN Revelation: Certain WPS-enabled routers may reveal information about the validity of the PIN during a connection attempt. This information disclosure can aid an attacker in narrowing down the search space during a brute-force attack.</li><li>Access Point Enumeration: Some routers with WPS may be vulnerable to an attack that allows an attacker to determine which access points are present in a given area.</li></ul><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><p>Most WPS attacks mentionned below can be conducted using <a href="https://github.com/v1s1t0r1sh3r3/airgeddon" target="_blank" rel="noreferrer">airgeddon</a> (Bash) or <a href="https://github.com/derv82/wifite2" target="_blank" rel="noreferrer">wifite2</a> (Python).</p><div class="tip custom-block"><p>Monitor mode can be activated automatically with these tools. The <a href="#monitor-mode">monitor</a> section would not needed then.</p></div><div class="caution custom-block"><p>Some of the commands listed in this section may require high privileges to run. Containers would also need high privileges on a host.</p></div><p>There are three main methods for setting up a connection using WPS:</p><ul><li>Push Button Configuration (PBC): Press the WPS button on the router and then activate the WPS function on the device to connect. The two devices will automatically establish a connection.</li><li>PIN based Configuration: Each WPS-enabled device has a unique PIN code. It can be entered on the router through its web interface, or vice versa, to establish the connection.</li><li>Near Field Communication Configuration: In which the user has to bring the new client close to the access point to allow a near field communication between the devices. NFC Forum–compliant RFID tags can also be used.</li></ul><h3 id="monitor-mode" tabindex="-1">Monitor mode <a class="header-anchor" href="#monitor-mode" aria-label="Permalink to &quot;Monitor mode&quot;">​</a></h3><p>The default configuration for wireless interfaces is &quot;Managed&quot; mode, restricting packet capture to those with a &quot;Destination MAC&quot; matching the interface&#39;s own MAC address. To capture all packets within a wireless device&#39;s range, switch the mode to &quot;Monitor.&quot;</p>',14)),e(r,null,{default:t(()=>[e(n,{label:"UNIX-like"},{default:t(()=>a[0]||(a[0]=[i("p",null,"The following native commands can be used to have a capable network interface in monitor mode.",-1),i("div",{class:"language-bash vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"bash"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# view wireless interfaces and check their current mode.")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"iwconfig")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# disable a network interface")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ifconfig"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"$INTERFACE"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"'),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," down")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# change the interface mode to monitor")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"iwconfig"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"$INTERFACE"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"'),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," mode"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," monitor")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# re-enable your network interface.")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ifconfig"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"$INTERFACE"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"'),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," up")])])])],-1)])),_:1}),e(n,{label:"Aircrack-ng"},{default:t(()=>a[1]||(a[1]=[i("p",null,[s("With "),i("a",{href:"https://www.aircrack-ng.org/",target:"_blank",rel:"noreferrer"},"Aircrack-ng"),s(" (C) installed, the following commands can be used.")],-1),i("div",{class:"language-bash vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"bash"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# list all your network interfaces.")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"airmon-ng")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# stop interfering network processes")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"arimon-ng"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," check"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," kill")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# start a network interface in monitor mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"airmon-ng"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," start"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"$INTERFACE"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"')])])])],-1)])),_:1})]),_:1}),a[3]||(a[3]=l(`<h3 id="recon" tabindex="-1">Recon <a class="header-anchor" href="#recon" aria-label="Permalink to &quot;Recon&quot;">​</a></h3><p><a href="https://github.com/t6x/reaver-wps-fork-t6x" target="_blank" rel="noreferrer">Wash</a> is used to identify nearby WPS-enabled access points along with their main characteristics. It is included in the <a href="https://github.com/t6x/reaver-wps-fork-t6x" target="_blank" rel="noreferrer">Reaver</a> (C) package.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$INTERFACE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><h3 id="pin-brute-force" tabindex="-1">PIN Brute-Force <a class="header-anchor" href="#pin-brute-force" aria-label="Permalink to &quot;PIN Brute-Force&quot;">​</a></h3><p>In 2011, researcher <a href="https://twitter.com/sviehb" target="_blank" rel="noreferrer">Stefan Viehböck</a> identified a design and implementation flaw that made PIN-based WPS vulnerable to brute-force attacks. A successful exploitation of this flaw would grant unauthorized individuals access to the network, and the sole effective solution is to disable WPS.</p><p>Two main tools are now available for conducting this attack: <a href="https://github.com/t6x/reaver-wps-fork-t6x" target="_blank" rel="noreferrer">Reaver</a> (C) and <a href="https://github.com/aanarchyy/bully" target="_blank" rel="noreferrer">Bully</a> (C).</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use 5GHz 802.11 channels (for both tools): -5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With reaver</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Verbosity of output (for reaver): -v -vv -vvv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reaver</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$INTERFACE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BSSID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$CHANNEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vv</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With bully</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Verbosity of output: -v 1 -v 2 -v 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$INTERFACE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BSSID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$CHANNEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -B</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><h3 id="pixie-dust" tabindex="-1">Pixie Dust <a class="header-anchor" href="#pixie-dust" aria-label="Permalink to &quot;Pixie Dust&quot;">​</a></h3><p>In 2014, <a href="https://twitter.com/Reversity" target="_blank" rel="noreferrer">Dominique Bongard</a> identified a security vulnerability he dubbed &quot;Pixie Dust&quot;. It specifically targets the default WPS implementation found in wireless chips produced by various manufacturers, including Ralink, MediaTek, Realtek, and Broadcom. The attack exploits a randomization deficiency during the generation of the &quot;E-S1&quot; and &quot;E-S2&quot; &quot;secret&quot; nonces. Knowing these nonces, the PIN can be retrieved in a matter of minutes.</p><p>A tool called <a href="https://github.com/wiire-a/pixiewps" target="_blank" rel="noreferrer">pixiewps</a> was developed, and a new version of <a href="https://github.com/t6x/reaver-wps-fork-t6x" target="_blank" rel="noreferrer">Reaver</a> was created to automate the attack.</p><p>Check <a href="https://docs.google.com/spreadsheets/d/1tSlbqVQ59kGn8hgmwcPTHUECQ3o9YhXR91A_p7Nnj5Y" target="_blank" rel="noreferrer">this list</a> to know which router model is vulnerable.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use 5GHz 802.11 channels (for both tools): -5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With reaver</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Verbosity of output (for reaver): -v -vv -vvv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reaver</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$INTERFACE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BSSID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$CHANNEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -K</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -N</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vv</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With bully</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Verbosity of output: -v 1 -v 2 -v 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bully</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$INTERFACE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BSSID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><h3 id="null-pin" tabindex="-1">Null Pin <a class="header-anchor" href="#null-pin" aria-label="Permalink to &quot;Null Pin&quot;">​</a></h3><p>Some poorly implemented systems allowed the use of a &quot;Null&quot; PIN for connections. <a href="https://github.com/t6x/reaver-wps-fork-t6x" target="_blank" rel="noreferrer">Reaver</a> can conduct the attack, whereas <a href="https://github.com/aanarchyy/bully" target="_blank" rel="noreferrer">Bully</a> lacks this specific functionality.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reaver</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$INTERFACE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$BSSID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$CHANNEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -N</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span></code></pre></div>`,15))])}const f=o(d,[["render",c]]);export{E as __pageData,f as default};
