import{_ as t,c as s,a5 as i,o as a}from"./chunks/framework.B5CpDqM0.js";const k=JSON.parse('{"title":"DHCP poisoning","description":"","frontmatter":{"authors":"ShutdownRepo, sckdev"},"headers":[],"relativePath":"ad/movement/mitm-and-coerced-authentications/dhcp-poisoning.md","filePath":"ad/movement/mitm-and-coerced-authentications/dhcp-poisoning.md","lastUpdated":1724982529000}'),n={name:"ad/movement/mitm-and-coerced-authentications/dhcp-poisoning.md"};function o(r,e,h,l,p,d){return a(),s("div",null,e[0]||(e[0]=[i(`<h1 id="dhcp-poisoning" tabindex="-1">DHCP poisoning <a class="header-anchor" href="#dhcp-poisoning" aria-label="Permalink to &quot;DHCP poisoning&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>When a workstation reboots or plugs into a network, a broadcast DHCP request is emitted. It&#39;s goal is to ask for network settings like an IPv4 address.</p><blockquote><p>Windows uses several custom DHCP options such as NetBIOS, WINS, WPAD settings. When a workstation sends a DHCP request to get its networking settings, these additional settings can be included in the DHCP answer to facilitate straightforward connectivity and name resolution. <em>(</em><a href="https://g-laurent.blogspot.com/2021/08/responders-dhcp-poisoner.html" target="_blank" rel="noreferrer"><em>Laurent Gaffié</em></a><em>)</em></p></blockquote><p><a href="https://docs.microsoft.com/en-us/previous-versions/tn-archive/bb794881(v=technet.10)" target="_blank" rel="noreferrer">DHCP&#39;s option 252</a> provides Windows machines with a WPAD configuration. An attacker able to answer broadcast DHCP queries faster than the legit DHCP server can inject any network setting on the requesting client.</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><p><a href="https://github.com/SpiderLabs/Responder" target="_blank" rel="noreferrer">Responder</a> (Python) can be used to operate DHCP poisoning in the following manner</p><ul><li>race against the legit DHCP server to answer <code>DHCP REQUEST</code> messages</li><li>sent a DHCP ACK response with a rogue WPAD server address in <code>option 252</code> in the network parameters, with a short lease (10 seconds). Responder can also be used to attempt at injecting a DNS server instead.</li><li>wait the lease to expire so that the poisoned client asks for a new lease</li><li>let the client obtain a legitimate lease from the real DHCP server, allowing the client to obtain the right network settings and have connectivity</li><li>the injected WPAD server address will stay until the client reboots. If the injected field was a DNS server, it will be overwritten with the new legit DHCP lease.</li><li>with the injected WPAD server address, the Windows client will try to obtain the <code>wpad.dat</code> file on the rogue WPAD. Responder will then require the client to authenticate.</li></ul><p>The attack can be started with the <code>-d/--DHCP</code> (WPAD injection) argument. By default, a rogue WPAD server will be injected in the configuration. If the additional<code>-D/--DHCP-DNS</code> argument is set, a rogue DNS server address will be injected in the configuration instead of a WPAD.</p><p>Additional arguments and options should be used when doing DHCP poisoning with the <code>-d/--DHCP</code> argument. Those options can also be used along <code>-D/--DHCP-DNS</code> since the WPAD DNS entry will be one of the first queries by the poisoned machine.</p><ul><li>The <code>-w/--wpad</code> option to start the WPAD rogue server so that fake <code>wpad.dat</code> file can be served to requesting clients (i.e. <a href="./wpad-spoofing">WPAD spoofing</a>)</li><li>The <code>-P/--ProxyAuth</code> option to force the Windows client to authenticate after the <code>wpad.dat</code> is accessed and when the client starts using the proxy</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># DNS injection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">responder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eth0&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --DHCP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --DHCP-DNS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --wpad</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ProxyAuth</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">responder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eth0&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -wPdD</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># WPAD injection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">responder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eth0&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --DHCP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --wpad</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ProxyAuth</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">responder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eth0&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -wPd</span></span></code></pre></div><div class="tip custom-block"><p>The proxy auth NTLM authentication can either be</p><ul><li>forced and <a href="./../ntlm/capture">captured</a> with Responder with the command line above (with <code>--wredir</code> and <code>--ProxyAuth</code>)</li><li>or forced and <a href="./../ntlm/relay">relayed</a> with <a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py" target="_blank" rel="noreferrer">ntlmrelayx</a> (by using the <code>--http-port 3128</code> argument</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">responder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eth0&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --DHCP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --DHCP-DNS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --wpad</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ntlmrelayx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $target </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--http-port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3128</span></span></code></pre></div></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://g-laurent.blogspot.com/2021/08/responders-dhcp-poisoner.html" target="_blank" rel="noreferrer">https://g-laurent.blogspot.com/2021/08/responders-dhcp-poisoner.html</a></p>`,15)]))}const g=t(n,[["render",o]]);export{k as __pageData,g as default};
