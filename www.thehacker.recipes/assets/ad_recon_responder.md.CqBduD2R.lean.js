import{_ as s,c as a,a5 as t,o as n}from"./chunks/framework.B5CpDqM0.js";const u=JSON.parse('{"title":"Responder ⚙️","description":"","frontmatter":{"authors":"ShutdownRepo, sckdev"},"headers":[],"relativePath":"ad/recon/responder.md","filePath":"ad/recon/responder.md","lastUpdated":1724982529000}'),o={name:"ad/recon/responder.md"};function r(i,e,l,d,p,h){return n(),a("div",null,e[0]||(e[0]=[t(`<h1 id="responder-⚙️" tabindex="-1">Responder ⚙️ <a class="header-anchor" href="#responder-⚙️" aria-label="Permalink to &quot;Responder ⚙️&quot;">​</a></h1><p><a href="https://github.com/lgandx/Responder" target="_blank" rel="noreferrer">Responder</a> (Python) is a great tool for <a href="./../movement/mitm-and-coerced-authentications/llmnr-nbtns-mdns-spoofing">LLMNR, NBTNS, MDNS poisoning</a> and <a href="./../movement/mitm-and-coerced-authentications/wpad-spoofing">WPAD spoofing</a> but it can also be used in &quot;analyze&quot; modes.</p><ul><li>BROWSER mode: inspect <a href="http://ubiqx.org/cifs/Browsing.html" target="_blank" rel="noreferrer">Browse Service</a> messages and map IP addresses with NetBIOS names</li><li>LANMAN mode: passively map domain controllers, servers and workstations joined to a domain with the Browser protocol (see <a href="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/responder-20-owning-windows-networks-part-3/" target="_blank" rel="noreferrer">this</a>).</li><li>LLMNR, NBTNS, MDNS modes: inspect broadcast and multicast name resolution requests</li></ul><p>The following command will enable the analyze modes and will give interesting information like</p><ul><li>Domain Controller, SQL servers, workstations</li><li>Fully Qualified Domain Name (FQDN)</li><li>Windows versions in used</li><li>The &quot;enabled&quot; or &quot;disabled&quot; state of protocols like LLMNR, NBTNS, MDNS, LANMAN, BROWSER</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">responder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eth0&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --analyze</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">responder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eth0&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span></code></pre></div><p><a href="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/responder-20-owning-windows-networks-part-3/" target="_blank" rel="noreferrer">https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/responder-20-owning-windows-networks-part-3/</a></p>`,7)]))}const m=s(o,[["render",r]]);export{u as __pageData,m as default};
