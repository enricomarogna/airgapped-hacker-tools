import{_ as e,c as t,a5 as s,o as r}from"./chunks/framework.B5CpDqM0.js";const k=JSON.parse('{"title":"Network protocols","description":"","frontmatter":{"authors":"ShutdownRepo"},"headers":[],"relativePath":"ad/movement/credentials/dumping/network-protocols.md","filePath":"ad/movement/credentials/dumping/network-protocols.md","lastUpdated":1724982529000}'),i={name:"ad/movement/credentials/dumping/network-protocols.md"};function n(o,a,l,p,h,c){return r(),t("div",null,a[0]||(a[0]=[s(`<h1 id="network-protocols" tabindex="-1">Network protocols <a class="header-anchor" href="#network-protocols" aria-label="Permalink to &quot;Network protocols&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>Plaintext protocols (like HTTP, FTP, SNMP, SMTP) are widely used within organizations. Being able to capture and parse that traffic could offer attackers valuable information like sensitive files, passwords or hashes. There are many ways an attacker can obtain a <a href="./../../mitm-and-coerced-authentications/">man-in-the-middle</a> position, <a href="./../../mitm-and-coerced-authentications/arp-poisoning">ARP poisoning</a> being the most common and effective one.</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><p>Once network traffic is hijacked and goes through an attacker-controlled equipement, valuable information can be searched through captured (with <a href="https://www.tcpdump.org/manpages/tcpdump.1.html" target="_blank" rel="noreferrer">tcpdump</a>, <a href="https://www.wireshark.org/docs/man-pages/tshark.html" target="_blank" rel="noreferrer">tshark </a>or <a href="https://www.wireshark.org/" target="_blank" rel="noreferrer">wireshark</a>) or through live traffic.</p><p><a href="https://github.com/lgandx/PCredz" target="_blank" rel="noreferrer">PCredz </a>(Python) is a good example and allows extraction of credit card numbers, NTLM (DCE-RPC, HTTP, SQL, LDAP, etc), Kerberos (AS-REQ Pre-Auth etype 23, i.e. <a href="./../../kerberos/asreqroast">ASREQroast</a>), HTTP Basic, SNMP, POP, SMTP, FTP, IMAP, etc from a pcap file or from a live interface.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># extract credentials from a pcap file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pcredz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;file-to-parse.pcap&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># extract credentials from all pcap files in a folder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pcredz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/path/to/pcaps/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># extract credentials from a live packet capture on a network interface</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pcredz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $INTERFACE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-v</span></span></code></pre></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://github.com/lgandx/PCredz" target="_blank" rel="noreferrer">https://github.com/lgandx/PCredz</a></p>`,9)]))}const m=e(i,[["render",n]]);export{k as __pageData,m as default};
