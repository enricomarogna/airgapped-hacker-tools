import{_ as a,c as t,a5 as s,o as i}from"./chunks/framework.B5CpDqM0.js";const u=JSON.parse('{"title":"üõ†Ô∏è Password reset","description":"","frontmatter":{"authors":"ShutdownRepo"},"headers":[],"relativePath":"web/accounts-and-sessions/password-reset.md","filePath":"web/accounts-and-sessions/password-reset.md","lastUpdated":1724982529000}'),o={name:"web/accounts-and-sessions/password-reset.md"};function r(n,e,l,c,d,h){return i(),t("div",null,e[0]||(e[0]=[s(`<h1 id="üõ†Ô∏è-password-reset" tabindex="-1">üõ†Ô∏è Password reset <a class="header-anchor" href="#üõ†Ô∏è-password-reset" aria-label="Permalink to &quot;üõ†Ô∏è Password reset&quot;">‚Äã</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>Websites that manage user accounts usually have a &quot;forgot password&quot; or &quot;reset password&quot; feature. This offers attackers an interesting vector as it could potentially lead to Account Takeover (ATO).</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><p>When this feature is present on a website, there a a few things to check.</p><ul><li>Is there a captcha, rate-limit or any other anti-DoS mitigation?</li><li>Is there any kind of validation, from the user, that the password must be reset? This could lead to a kind of DoS on user accounts if there isn&#39;t.</li><li>Is the feature relying on security questions that could be easily answered from OSINT or Social Engineering?</li><li>Is the previous password sent in clear-text to the user, indicating that the passwords are not stored in a hashed format?</li><li>If a one-time password (OTP) is sent to proceed with the password reset, is it sent on a secure channel (e.g. mitigating MitM)?</li><li>Can the feature be used by attackers to enumerate users (e.g. error message when trying to proceed with a user that doesn&#39;t exist)?</li><li>Is there a password reset link sent? If so: <ul><li>Is it still valid after a reset?</li><li>Does it have an expiry date? If so, is it still valid after that period of time?</li><li>Is the link fully random or is there any guessable format that can be reproduced to takeover other accounts?</li></ul></li><li>Is &quot;password reset&quot; link sent to an email indicated in a parameter that is not correctly filtered? --&gt; <a href="./password-reset#manipulation-of-parameters">Paramater manipulation</a></li></ul><p>///// WIP below</p><h3 id="password-reset-poisoning" tabindex="-1">Password Reset Poisoning <a class="header-anchor" href="#password-reset-poisoning" aria-label="Permalink to &quot;Password Reset Poisoning&quot;">‚Äã</a></h3><p>To provide the user with a link to reset its password, some implementations use the result of input headers such as the <code>Host</code> header. This helps in constructing a resetting password link by keeping the origin (<code>example.com</code>). By manually changing the <code>Host</code> header and using a malicious origin (<code>malicious.com</code>), the user is redirected to malicious.com when clicking the link.</p><p>This vulnerability is easy to test.</p><ol><li>Send a request to a forget password mechanism using your own email.</li><li>Change the Host header between the requests</li><li>Check the resetting password link you received via email. If the value of the <code>Host</code> header is reflected in the origin in the link (<code>https://www.malicious.com/reset-link.php?token=$TOKEN_VALUE</code>, then it&#39;s vulnerable</li></ol><h3 id="token-leak-via-referer-header" tabindex="-1">Token leak via Referer header <a class="header-anchor" href="#token-leak-via-referer-header" aria-label="Permalink to &quot;Token leak via Referer header&quot;">‚Äã</a></h3><p>The <code>Referer</code> header contains information about the previous web page from which a request has been made. It <code>example1.com</code> has a link pointing to <code>example2.com</code>, when clicking on that link, the <code>Referer</code> header will be set to <code>example1.com</code>. The <code>Referer</code> header will print out the whole URL, containing query parameters and so on, not just the origin.</p><div class="tip custom-block"><p>Using the <code>Referrer-Policy</code> with the directive <code>no-referrer</code> mitigates the issue.</p></div><p>To test for token leakage:</p><ol><li>The forgot password mechanism has to be used with a valid email address.</li><li>After clicking on the reset password link (received by email), the password shouldn&#39;t be changed.</li><li>Upon clicking on the reset password link, it&#39;s important to click on another link from another origin.</li><li>By intercepting the request, one can check if the <code>Referer</code> header (if set), contains the token.</li></ol><div class="tip custom-block"><p>In a real-world situation, the &quot;other&quot; origin should be vulnerable for an attacker to intercept the token (from the <code>Referer</code> header).</p></div><h3 id="paramater-manipulation" tabindex="-1">Paramater manipulation <a class="header-anchor" href="#paramater-manipulation" aria-label="Permalink to &quot;Paramater manipulation&quot;">‚Äã</a></h3><p>When clicking on a reset password button, a request can be sent with a parameter such as <code>email=$EMAIL</code>. By modifying this parameter, multiple tests can be done to take over the account requesting a reset password.</p><p>Based on CyPH3R&#39;s <a href="https://anugrahsr.github.io/posts/10-Password-reset-flaws/#2-account-takeover-through-password-reset-poisoning" target="_blank" rel="noreferrer">blog post</a>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>email=victim@email.com&amp;email=attacker@email.com</span></span>
<span class="line"><span>email=victim@email.com%20email=attacker@email.com</span></span>
<span class="line"><span>email=victim@email.com|email=attacker@email.com</span></span>
<span class="line"><span>email=&quot;victim@mail.tld%0a%0dcc:attacker@mail.tld&quot;</span></span>
<span class="line"><span>email=&quot;victim@mail.tld%0a%0dbcc:attacker@mail.tld&quot;</span></span>
<span class="line"><span>email=&quot;victim@mail.tld&quot;,email=&quot;attacker@mail.tld&quot;</span></span>
<span class="line"><span>{&quot;email&quot;:[&quot;victim@mail.tld&quot;,&quot;atracker@mail.tld&quot;]}</span></span></code></pre></div><p>The same can be done when the request uses an API:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(&quot;form&quot;: {&quot;email&quot;:&quot;victim@email.tld&quot;,&quot;password&quot;:&quot;12345678&quot;})</span></span></code></pre></div>`,23)]))}const m=a(o,[["render",r]]);export{u as __pageData,m as default};
