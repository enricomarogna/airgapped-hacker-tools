import{_ as a,c as t,a5 as s,o}from"./chunks/framework.B5CpDqM0.js";const u=JSON.parse('{"title":"üõ†Ô∏è Obfuscation","description":"Lists of techniques used to hide your payload","frontmatter":{"description":"Lists of techniques used to hide your payload","authors":"Jenaye, ShutdownRepo"},"headers":[],"relativePath":"evasion/av/obfuscation.md","filePath":"evasion/av/obfuscation.md","lastUpdated":1725525074000}'),n={name:"evasion/av/obfuscation.md"};function i(r,e,l,c,h,p){return o(),t("div",null,e[0]||(e[0]=[s(`<h1 id="üõ†Ô∏è-obfuscation" tabindex="-1">üõ†Ô∏è Obfuscation <a class="header-anchor" href="#üõ†Ô∏è-obfuscation" aria-label="Permalink to &quot;üõ†Ô∏è Obfuscation&quot;">‚Äã</a></h1><div class="warning custom-block"><p>This is a work-in-progress. It&#39;s indicated with the üõ†Ô∏è emoji in the page name or in the category name. Wanna help? Please reach out to me: <a href="https://twitter.com/_nwodtuhs" target="_blank" rel="noreferrer">@_nwodtuhs</a></p></div><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>Obfuscation is a way to hide a shellcode. generally symmetric algorithms are used</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><h3 id="manual-obfuscation" tabindex="-1">Manual obfuscation <a class="header-anchor" href="#manual-obfuscation" aria-label="Permalink to &quot;Manual obfuscation&quot;">‚Äã</a></h3><p>Below is a list of ways that allow you to go under the radar of anti-virus software, so put all the chances on your side and use several techniques.<br> You should also <code>change the logo</code> of the binary as well as its <code>description</code> and its <code>creation date</code> (sandboxes check that the binary is not too recent).</p><h4 id="shellcode-encoding" tabindex="-1">Shellcode encoding <a class="header-anchor" href="#shellcode-encoding" aria-label="Permalink to &quot;Shellcode encoding&quot;">‚Äã</a></h4><p>For this part the principle is simple: camouflaged its active load, to do this you will need to code a function to encode, but also to decode, free to choose algorithm this technique works particularly well for static bypass.</p><p>Here is a link that will allow you to understand and write your first program:</p><p><a href="https://www.ired.team/offensive-security/code-injection-process-injection/writing-custom-shellcode-encoders-and-decoders" target="_blank" rel="noreferrer">https://www.ired.team/offensive-security/code-injection-process-injection/writing-custom-shellcode-encoders-and-decoders</a></p><h4 id="indirect-syscall" tabindex="-1">Indirect syscall <a class="header-anchor" href="#indirect-syscall" aria-label="Permalink to &quot;Indirect syscall&quot;">‚Äã</a></h4><p>the principle of this method is to call directly the memory addresses instead of using the API functions an article which explains things very well is <a href="https://medium.com/@merasor07/av-edr-evasion-using-direct-system-calls-user-mode-vs-kernel-mode-fad2fdfed01a" target="_blank" rel="noreferrer">this one</a>.</p><h4 id="delayed-execution" tabindex="-1">Delayed execution <a class="header-anchor" href="#delayed-execution" aria-label="Permalink to &quot;Delayed execution&quot;">‚Äã</a></h4><p>In order to compromise the machine discreetly, sleeps are also used a lot, There are several methods: <code>WaitForSingleObjectEx, Foliage, Ekko, Deathsleep.</code></p><p>A good part of them are very well explained at the following address : <a href="https://evasions.checkpoint.com/techniques/timing.html#delayed-execution" target="_blank" rel="noreferrer">https://evasions.checkpoint.com/techniques/timing.html#delayed-execution</a></p><h4 id="disable-etw" tabindex="-1">Disable ETW <a class="header-anchor" href="#disable-etw" aria-label="Permalink to &quot;Disable ETW&quot;">‚Äã</a></h4><p>There are several ways to disable logging, either via <code>nt!EtwpStopTrace</code>, or <code>advapi32!EventWrite</code> but also <code>ntdll!ETWEventWrite.</code></p><p>To better understand these keywords, I invite you to read this article: <a href="https://www.binarly.io/posts/Design_issues_of_modern_EDRs_bypassing_ETW-based_solutions/index.html" target="_blank" rel="noreferrer">https://www.binarly.io/posts/Design_issues_of_modern_EDRs_bypassing_ETW-based_solutions/index.html</a>.</p><p>Another great resource : <a href="https://www.mdsec.co.uk/2020/03/hiding-your-net-etw/" target="_blank" rel="noreferrer">https://www.mdsec.co.uk/2020/03/hiding-your-net-etw/</a>.</p><h3 id="automatic-obfuscation" tabindex="-1">Automatic obfuscation <a class="header-anchor" href="#automatic-obfuscation" aria-label="Permalink to &quot;Automatic obfuscation&quot;">‚Äã</a></h3><p>Depending on your needs, you can use tools available for the most part on github, they are sorted by category below.</p><p>‚ÑπÔ∏è You can also find all the tools in the mindmap section.</p><h4 id="packing" tabindex="-1">Packing <a class="header-anchor" href="#packing" aria-label="Permalink to &quot;Packing&quot;">‚Äã</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- https://github.com/phra/PEzor</span></span>
<span class="line"><span>- https://github.com/klezVirus/inceptor</span></span>
<span class="line"><span>- https://github.com/govolution/avet</span></span>
<span class="line"><span>- https://github.com/Nariod/RustPacker</span></span>
<span class="line"><span>- https://github.com/DavidBuchanan314/monomorph</span></span>
<span class="line"><span>- https://github.com/upx/upx</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Office macro</span></span>
<span class="line"><span>- https://github.com/sevagas/macro_pack</span></span>
<span class="line"><span>- https://github.com/optiv/Ivy</span></span></code></pre></div><h4 id="amsi-bypass" tabindex="-1">AMSI Bypass <a class="header-anchor" href="#amsi-bypass" aria-label="Permalink to &quot;AMSI Bypass&quot;">‚Äã</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- https://github.com/CCob/SharpBlock</span></span>
<span class="line"><span>- https://github.com/danielbohannon/Invoke-Obfuscation</span></span>
<span class="line"><span>- https://github.com/klezVirus/Chameleon</span></span>
<span class="line"><span>- https://github.com/tokyoneon/Chimera</span></span></code></pre></div><h4 id="entropy" tabindex="-1">Entropy <a class="header-anchor" href="#entropy" aria-label="Permalink to &quot;Entropy&quot;">‚Äã</a></h4><p><a href="https://github.com/kleiton0x00/Shelltropy" target="_blank" rel="noreferrer">https://github.com/kleiton0x00/Shelltropy</a></p><h4 id="lolbin" tabindex="-1">LOLBIN <a class="header-anchor" href="#lolbin" aria-label="Permalink to &quot;LOLBIN&quot;">‚Äã</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> RemComSvc - https://gist.github.com/snovvcrash/123945e8f06c7182769846265637fedb</span></span></code></pre></div><h4 id="signature-hiding" tabindex="-1">Signature hiding <a class="header-anchor" href="#signature-hiding" aria-label="Permalink to &quot;Signature hiding&quot;">‚Äã</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- https://github.com/optiv/ScareCrow</span></span>
<span class="line"><span>- https://github.com/paranoidninja/CarbonCopy</span></span></code></pre></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">‚Äã</a></h2>`,34)]))}const b=a(n,[["render",i]]);export{u as __pageData,b as default};
