import{_ as t,c as a,a5 as n,o as r}from"./chunks/framework.B5CpDqM0.js";const g=JSON.parse('{"title":"üõ†Ô∏è Logging in","description":"","frontmatter":{"authors":"KenjiEndo15, ShutdownRepo"},"headers":[],"relativePath":"web/accounts-and-sessions/logging-in.md","filePath":"web/accounts-and-sessions/logging-in.md","lastUpdated":1724982529000}'),s={name:"web/accounts-and-sessions/logging-in.md"};function o(i,e,h,c,l,p){return r(),a("div",null,e[0]||(e[0]=[n('<h1 id="üõ†Ô∏è-logging-in" tabindex="-1">üõ†Ô∏è Logging in <a class="header-anchor" href="#üõ†Ô∏è-logging-in" aria-label="Permalink to &quot;üõ†Ô∏è Logging in&quot;">‚Äã</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>link default passwords</p><p>Authentication issues are important to take into consideration. A login page can be the beginning of serious issues regarding accounts takeover.</p><p>or bruteforce</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><p>or authentication bypass</p><h3 id="brute-force" tabindex="-1">Brute-force <a class="header-anchor" href="#brute-force" aria-label="Permalink to &quot;Brute-force&quot;">‚Äã</a></h3><p>Brute-forcing can have 2 interesting purposes during a pentest engagement:</p><ol><li>Verifying that the web application implements security measures against brute-forcing.</li><li>Taking over an account by guessing its credentials.</li></ol><p>One has to check whether a defense mechanism is used (account locking, blocking IP, CAPTCHA, etc.)</p><div class="warning custom-block"><p>Account locking can lead to a denial of service and allow user enumeration. Check the <a href="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#account-lockout" target="_blank" rel="noreferrer">OWASP recommendation</a> on how it should be implemented.</p></div><h3 id="user-enumeration" tabindex="-1">User enumeration <a class="header-anchor" href="#user-enumeration" aria-label="Permalink to &quot;User enumeration&quot;">‚Äã</a></h3><p>User enumeration can be made possible depending on the:</p><ul><li>Status code (is the status code retrieved, always the same?)</li><li>Error messages (does the error messages give a hint on whether the account exists?)</li><li>Response time (is the response time always the same?)</li></ul><h3 id="json-web-tokens-jws-oauth-2-0" tabindex="-1">JSON Web Tokens (JWS) / OAuth 2.0 <a class="header-anchor" href="#json-web-tokens-jws-oauth-2-0" aria-label="Permalink to &quot;JSON Web Tokens (JWS) / OAuth 2.0&quot;">‚Äã</a></h3><p>Check the following pages for issues regarding <a href="https://www.thehacker.recipes/web/inputs/insecure-json-web-tokens" target="_blank" rel="noreferrer">JWS</a> and <a href="https://www.thehacker.recipes/web/configuration/oauth-2.0" target="_blank" rel="noreferrer">OAuth 2.0</a>.</p><h3 id="sql-injection" tabindex="-1">SQL injection <a class="header-anchor" href="#sql-injection" aria-label="Permalink to &quot;SQL injection&quot;">‚Äã</a></h3><p>The tool <a href="https://sqlmap.org/" target="_blank" rel="noreferrer">sqlmap</a> can unveil SQL injections on log-in forms.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sqlmap -r $REQUEST_FILE -p $LOGIN_PARAM,$PWD_PARAM</span></span></code></pre></div><div class="warning custom-block"><p>Use the <code>--level</code> and <code>--delay</code> options in pentest engagements to avoid issues (aggressive payloads and denial of service)</p></div><p>For manual testing: <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection#authentication-bypass" target="_blank" rel="noreferrer">SQL injection (PayloadsAllTheThings)</a></p><h3 id="üõ†Ô∏è-nosql-injection" tabindex="-1">üõ†Ô∏è NoSQL injection <a class="header-anchor" href="#üõ†Ô∏è-nosql-injection" aria-label="Permalink to &quot;üõ†Ô∏è NoSQL injection&quot;">‚Äã</a></h3><p>For manual testing: <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection#authentication-bypass" target="_blank" rel="noreferrer">NoSQL injection (PayloadsAllTheThings)</a></p><h3 id="üõ†Ô∏è-ldap-injection" tabindex="-1">üõ†Ô∏è LDAP injection <a class="header-anchor" href="#üõ†Ô∏è-ldap-injection" aria-label="Permalink to &quot;üõ†Ô∏è LDAP injection&quot;">‚Äã</a></h3><p>For manual testing: <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/LDAP%20Injection" target="_blank" rel="noreferrer">LDAP injection (PayloadsAllTheThings)</a></p><h3 id="encrypted-requests" tabindex="-1">Encrypted requests <a class="header-anchor" href="#encrypted-requests" aria-label="Permalink to &quot;Encrypted requests&quot;">‚Äã</a></h3><p>Some web applications don&#39;t use TLS to encrypt login requests, this can lead to account takeover via a Man-in-the-Middle attack.</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">‚Äã</a></h2><p><a href="https://portswigger.net/web-security/authentication/password-based" target="_blank" rel="noreferrer">https://portswigger.net/web-security/authentication/password-based</a></p><p><a href="https://portswigger.net/web-security/authentication/securing" target="_blank" rel="noreferrer">https://portswigger.net/web-security/authentication/securing</a></p><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html" target="_blank" rel="noreferrer">https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html</a></p><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html" target="_blank" rel="noreferrer">https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html</a></p><p><a href="https://auth0.com/blog/what-is-broken-authentication/" target="_blank" rel="noreferrer">https://auth0.com/blog/what-is-broken-authentication/</a></p><p><a href="https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication" target="_blank" rel="noreferrer">https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication</a></p><p><a href="https://book.hacktricks.xyz/pentesting-web/login-bypass" target="_blank" rel="noreferrer">https://book.hacktricks.xyz/pentesting-web/login-bypass</a></p><p>\\</p>',37)]))}const d=t(s,[["render",o]]);export{g as __pageData,d as default};
