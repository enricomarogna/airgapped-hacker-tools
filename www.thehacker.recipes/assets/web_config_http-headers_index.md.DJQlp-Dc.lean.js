import{_ as t,c as r,a5 as a,o}from"./chunks/framework.B5CpDqM0.js";const u=JSON.parse('{"title":"HTTP security headers","description":"","frontmatter":{"authors":"ShutdownRepo"},"headers":[],"relativePath":"web/config/http-headers/index.md","filePath":"web/config/http-headers/index.md","lastUpdated":1724982529000}'),s={name:"web/config/http-headers/index.md"};function i(n,e,c,l,d,h){return o(),r("div",null,e[0]||(e[0]=[a('<h1 id="http-security-headers" tabindex="-1">HTTP security headers <a class="header-anchor" href="#http-security-headers" aria-label="Permalink to &quot;HTTP security headers&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>HTTP security headers are used to inform a client (browser) how to behave when handling a website&#39;s content. These headers are important in preventing exploitation of vulnerabilities such as XSS, Man-in-the-Middle, <a href="https://owasp.org/www-community/attacks/Clickjacking" target="_blank" rel="noreferrer">clickjacking</a>, etc.</p><h3 id="sts-strict-transport-security" tabindex="-1">STS (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security" target="_blank" rel="noreferrer"><code>Strict-Transport-Security</code></a>) <a class="header-anchor" href="#sts-strict-transport-security" aria-label="Permalink to &quot;STS ([`Strict-Transport-Security`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security))&quot;">​</a></h3><p>Lets a web site tell browsers that it should only be accessed using HTTPS, instead of using HTTP. Prevents Man-in-the-Middle attacks.</p><ul><li>The <code>max-age</code> directive defines the time, in seconds, that the browser should remember that a site is only to be accessed using HTTPS.</li><li>The optional <code>includeSubDomains</code> directive defines if the rule applies to all of the site&#39;s subdomains as well</li><li>The optional <code>preload</code> directive ensures that a website will be accessed using HTTPS even during the first visit of the website. Indeed, websites require a user-agent to first visit them to understand that it must use STS. To correct this behavior, browsers have a list of websites that has to be accessed using HTTPS from the initial request.</li></ul><p>For more information: <a href="https://hstspreload.org/" target="_blank" rel="noreferrer">https://hstspreload.org/</a>.</p><h3 id="xfo-x-frame-options" tabindex="-1">XFO (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options" target="_blank" rel="noreferrer"><code>X-Frame-Options</code></a>) <a class="header-anchor" href="#xfo-x-frame-options" aria-label="Permalink to &quot;XFO ([`X-Frame-Options`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options))&quot;">​</a></h3><p>Header now <a href="https://www.w3.org/TR/CSP2/#frame-ancestors-and-frame-options" target="_blank" rel="noreferrer">obsolete </a>(use the <a href="./#csp-content-security-policy"><code>Content-Security-Policy</code></a> with the <code>frame-ancestors</code> directive set to <code>none</code> instead). This header indicated whether or not a browser should be allowed to render a page in a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame" target="_blank" rel="noreferrer"><code>&lt;frame&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="noreferrer"><code>&lt;iframe&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed" target="_blank" rel="noreferrer"><code>&lt;embed&gt;</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object" target="_blank" rel="noreferrer"><code>&lt;object&gt;</code></a>. Prevents <a href="./clickjacking/index">clickjacking attacks</a>.</p><ul><li><code>DENY</code>: the page cannot be displayed in a frame</li><li><code>SAMEORIGIN</code>: can only be displayed in a frame on the same origin as the page itself (which depends on how browsers vendors interpret this)</li><li><code>ALLOW-FROM uri</code>: obsolete directive. No longer works in modern browsers.</li></ul><h3 id="xcto-x-content-type-options" tabindex="-1">XCTO (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options" target="_blank" rel="noreferrer"><code>X-Content-Type-Options</code></a>) <a class="header-anchor" href="#xcto-x-content-type-options" aria-label="Permalink to &quot;XCTO ([`X-Content-Type-Options`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options))&quot;">​</a></h3><p>XCTO is used by the server to indicate that the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">MIME types</a> advertised in the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noreferrer"><code>Content-Type</code></a> headers should be followed and not be changed. It prevents <a href="./mime-sniffing">MIME type sniffing</a> attacks.</p><ul><li>The <code>nosniff</code> directive makes the browser block a request if the request destination is of type <code>style</code> and the MIME type is not <code>text/css</code>, or of type <code>script</code> and the MIME type is not a <a href="https://html.spec.whatwg.org/multipage/scripting.html#javascript-mime-type" target="_blank" rel="noreferrer">JavaScript MIME type</a>.</li></ul><h3 id="cors-cross-origin-resource-sharing" tabindex="-1">CORS (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noreferrer"><code>Cross-Origin-Resource-Sharing</code></a>) <a class="header-anchor" href="#cors-cross-origin-resource-sharing" aria-label="Permalink to &quot;CORS ([`Cross-Origin-Resource-Sharing`](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS))&quot;">​</a></h3><p>Allows a server to indicate any <a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin" target="_blank" rel="noreferrer">origins</a> (domain, scheme, or port) other than its own from which a browser should permit loading resources from.</p><div class="tip custom-block"><p>Read the <a href="./cors/index">cross-origin resource sharing</a> article for more insight</p></div><h3 id="csp-content-security-policy" tabindex="-1">CSP (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" target="_blank" rel="noreferrer"><code>Content-Security-Policy</code></a>) <a class="header-anchor" href="#csp-content-security-policy" aria-label="Permalink to &quot;CSP ([`Content-Security-Policy`](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP))&quot;">​</a></h3><p>Restrict how the browser accesses resources. Prevents XSS, XS-Leaks, <a href="./clickjacking/index">clickjacking</a></p><ul><li>The <code>default-src</code> directive acts as a <a href="https://content-security-policy.com/default-src/" target="_blank" rel="noreferrer">fallback</a> for the other CSP fetch directives. If not present, CSP will permit loading resources of any origins</li><li>The <code>unsafe-eval</code> directive allows unsafe evaluation code such as <code>eval()</code> for JavaScript.</li><li>The <code>unsafe-inline</code> directive allows execution of third-party JavaScript inline.</li><li>The <code>frame-ancestors</code> directive specifies valid parents that may embed a page using <code>\\&lt;frame&gt;</code>, <code>\\&lt;iframe&gt;</code>, <code>\\&lt;object&gt;</code>, <code>\\&lt;embed&gt;</code>, or <code>\\&lt;applet&gt;</code>. If its value is set to <code>none</code>, it obsoletes the <a href="./#xfo-x-frame-options"><code>X-Frame-Options</code></a> header.</li></ul><h3 id="xxp-x-xss-protection" tabindex="-1">XXP (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection" target="_blank" rel="noreferrer"><code>X-XSS-Protection</code></a>) <a class="header-anchor" href="#xxp-x-xss-protection" aria-label="Permalink to &quot;XXP ([`X-XSS-Protection`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection))&quot;">​</a></h3><p>Header now <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection" target="_blank" rel="noreferrer">deprecated</a>, only old browsers may use it. More harm can be done using X-XSS-Protection. Other methods can be used to prevent XSS attacks (CSP, escaping, sanitization...).</p><p><code>X-XSS-Protection</code> should not be used, or set to 0.</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><p>Presence and configuration of the security headers mentioned above should be checked. This can be done by inspecting HTTP responses with a proxy, with a browser, with specific tooling or by manually doing the request and analyzing the response.</p><p>The <a href="https://github.com/koenbuyens/securityheaders" target="_blank" rel="noreferrer">securityheaders</a> (Python) script and <a href="https://securityheaders.com/" target="_blank" rel="noreferrer">this online scanner</a> can also be used for that purpose.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">securityheaders</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;www.target.url&quot;</span></span></code></pre></div><p>Alternatively, headers can be inspected manually.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $URL</span></span></code></pre></div><p>In addition to that, scanner such as <a href="https://github.com/chenjj/CORScanner" target="_blank" rel="noreferrer">CORScanner</a> (Python) and <a href="https://csp-evaluator.withgoogle.com/" target="_blank" rel="noreferrer">CSP-evaluator</a> (online) can quickly help inspect the state of CORS and CSP and identity potential dangerous configurations.</p>',29)]))}const f=t(s,[["render",i]]);export{u as __pageData,f as default};
