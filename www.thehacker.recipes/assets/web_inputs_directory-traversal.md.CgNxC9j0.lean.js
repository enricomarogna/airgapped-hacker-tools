import{_ as a,c as s,a5 as t,o as i}from"./chunks/framework.B5CpDqM0.js";const u=JSON.parse('{"title":"üõ†Ô∏è Directory traversal","description":"","frontmatter":{"authors":"KenjiEndo15, ShutdownRepo"},"headers":[],"relativePath":"web/inputs/directory-traversal.md","filePath":"web/inputs/directory-traversal.md","lastUpdated":1724982529000}'),r={name:"web/inputs/directory-traversal.md"};function n(o,e,l,p,h,d){return i(),s("div",null,e[0]||(e[0]=[t(`<h1 id="üõ†Ô∏è-directory-traversal" tabindex="-1">üõ†Ô∏è Directory traversal <a class="header-anchor" href="#üõ†Ô∏è-directory-traversal" aria-label="Permalink to &quot;üõ†Ô∏è Directory traversal&quot;">‚Äã</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>Directory traversal (or Path traversal) is a vulnerability that allows an individual to read arbitrary files on a web server. Inputs that are not validated by the back-end server may be vulnerable to payloads such as &quot;../../../&quot;. Using this method, an attacker can go beyond the root directory of the website, thus reaching arbitrary files hosted on the web server (<code>/etc/passwd</code>, <code>/etc/hosts</code>, <code>c:/boot.ini</code>, etc.).</p><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">‚Äã</a></h3><p>Some details are important to know beforehand.</p><h4 id="path-separator" tabindex="-1">Path separator <a class="header-anchor" href="#path-separator" aria-label="Permalink to &quot;Path separator&quot;">‚Äã</a></h4><p>As the <a href="https://kennel209.gitbooks.io/owasp-testing-guide-v4/content/en/web_application_security_testing/testing_directory_traversalfile_include_otg-authz-001.html" target="_blank" rel="noreferrer">Owasp</a> mentions, each operating system uses different characters as a path separator.</p><p><em>Unix-like OS</em>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root directory: &quot;/&quot;</span></span>
<span class="line"><span>directory separator: &quot;/&quot;</span></span></code></pre></div><p><em>Windows OS&#39; Shell&#39;</em>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root directory: &quot;&lt;drive letter&gt;:\\&quot;</span></span>
<span class="line"><span>directory separator: &quot;\\&quot; or &quot;/&quot;</span></span></code></pre></div><p><em>Classic Mac OS</em>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root directory: &quot;&lt;drive letter&gt;:&quot;</span></span>
<span class="line"><span>directory separator: &quot;:&quot;</span></span></code></pre></div><h4 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">‚Äã</a></h4><p>Files and directories are case-insensitive, so there&#39;s no need to try different payloads based on case sensitivity. Also, one has to make sure that the payloads don&#39;t use a fixed drive letter (&quot;C:&quot;), but more (&quot;D:&quot;, &quot;E:&quot;...).</p><p>Directory traversal could lead to Remote Code Execution (RCE).</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><h3 id="tool" tabindex="-1">Tool <a class="header-anchor" href="#tool" aria-label="Permalink to &quot;Tool&quot;">‚Äã</a></h3><p>The tool <a href="https://github.com/wireghoul/dotdotpwn" target="_blank" rel="noreferrer">dotdotpwn</a> (Perl) can help in finding and exploiting directory traversal vulnerabilities by fuzzing the web app. However, manual testing is usually more efficient.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># With a request file where /?argument=TRAVERSAL (request file must be in /usr/share/dotdotpwn)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotdotpwn.pl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> payload</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $RHOST </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $RPORT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $REQUESTFILE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-k</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;root:&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/passwd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">‚Äã</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Generate a wordlist in STDOUT that can be used by other fuzzers (ffuf, gobuster...)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotdotpwn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stdout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><h3 id="manual-testing" tabindex="-1">Manual testing <a class="header-anchor" href="#manual-testing" aria-label="Permalink to &quot;Manual testing&quot;">‚Äã</a></h3><h4 id="reconnaissance" tabindex="-1">Reconnaissance <a class="header-anchor" href="#reconnaissance" aria-label="Permalink to &quot;Reconnaissance&quot;">‚Äã</a></h4><p>The first step is to find what kind of system is used (Linux, Windows...). One could do that by checking on which <a href="https://www.thehacker.recipes/web/recon/web-technologies" target="_blank" rel="noreferrer">web technology</a> is used (some technologies run on Linux while others run on Windows).</p><p>Next, finding the right parameter to inject is essential. Usually, a vulnerable parameter is one that requires a file that will be fetched by the back-end server using a path (form parameters, cookies...).</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://example.com/getItem.jsp?item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=file.html</span></span></code></pre></div><p>Then, to construct a payload, it&#39;s interesting to have a set of important files to search:</p><ul><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal#interesting-linux-files" target="_blank" rel="noreferrer">Linux (PayloadsAllTheThings)</a></li><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal#interesting-windows-files" target="_blank" rel="noreferrer">Windows (PayloadsAllTheThings)</a></li></ul><h4 id="filter-bypass" tabindex="-1">Filter bypass <a class="header-anchor" href="#filter-bypass" aria-label="Permalink to &quot;Filter bypass&quot;">‚Äã</a></h4><p>Various filters could be set for a web application (using a Web Application Firewall for example). A set of bypass payloads can be found in <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal#basic-exploitation" target="_blank" rel="noreferrer">PayloadsAllTheThings</a>.</p><h3 id="user-privilege" tabindex="-1">User privilege <a class="header-anchor" href="#user-privilege" aria-label="Permalink to &quot;User privilege&quot;">‚Äã</a></h3><p><a href="https://www.soffensive.com/posts/web-app-sec/2018-06-19-exploiting-blind-file-reads-path-traversal-vulnerabilities-on-microsoft-windows-operating-systems/" target="_blank" rel="noreferrer">soffensive.com</a>:</p><blockquote><p>If you can successfully retrieve one of the following files, you are at least a member of the Administrators group:</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    c:/documents and settings/administrator/ntuser.ini</span></span>
<span class="line"><span>    c:/documents and settings/administrator/desktop/desktop.ini</span></span>
<span class="line"><span>    c:/users/administrator/desktop/desktop.ini</span></span>
<span class="line"><span>    c:/users/administrator/ntuser.ini</span></span></code></pre></div><div class="warning custom-block"><p>There may be no &quot;administrator&quot; account, you have to guess the right one in that case.</p></div><blockquote><p>If you can read either of these files, the file reading process has <code>LocalSystem</code>privileges.</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    c:/system volume information/wpsettings.dat</span></span>
<span class="line"><span>    C:/Windows/CSC/v2.0.6/pq</span></span>
<span class="line"><span>    C:/Windows/CSC/v2.0.6/sm</span></span>
<span class="line"><span>    C:/$Recycle.Bin/S-1-5-18/desktop.ini</span></span></code></pre></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">‚Äã</a></h2><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal" target="_blank" rel="noreferrer">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Directory%20Traversal</a></p><p><a href="https://kennel209.gitbooks.io/owasp-testing-guide-v4/content/en/web_application_security_testing/testing_directory_traversalfile_include_otg-authz-001.html" target="_blank" rel="noreferrer">https://kennel209.gitbooks.io/owasp-testing-guide-v4/content/en/web_application_security_testing/testing_directory_traversalfile_include_otg-authz-001.html</a></p><p><a href="https://portswigger.net/web-security/file-path-traversal" target="_blank" rel="noreferrer">https://portswigger.net/web-security/file-path-traversal</a></p><p><a href="https://www.soffensive.com/posts/web-app-sec/2018-06-19-exploiting-blind-file-reads-path-traversal-vulnerabilities-on-microsoft-windows-operating-systems/" target="_blank" rel="noreferrer">https://www.soffensive.com/posts/web-app-sec/2018-06-19-exploiting-blind-file-reads-path-traversal-vulnerabilities-on-microsoft-windows-operating-systems/</a></p>`,41)]))}const g=a(r,[["render",n]]);export{u as __pageData,g as default};
