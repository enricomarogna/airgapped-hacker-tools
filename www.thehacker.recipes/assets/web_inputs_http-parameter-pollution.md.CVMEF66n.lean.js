import{_ as t,c as a,a5 as r,o}from"./chunks/framework.B5CpDqM0.js";const d=JSON.parse('{"title":"üõ†Ô∏è HTTP parameter pollution","description":"","frontmatter":{"authors":"KenjiEndo15, ShutdownRepo"},"headers":[],"relativePath":"web/inputs/http-parameter-pollution.md","filePath":"web/inputs/http-parameter-pollution.md","lastUpdated":1724982529000}'),s={name:"web/inputs/http-parameter-pollution.md"};function i(n,e,p,l,h,c){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="üõ†Ô∏è-http-parameter-pollution" tabindex="-1">üõ†Ô∏è HTTP parameter pollution <a class="header-anchor" href="#üõ†Ô∏è-http-parameter-pollution" aria-label="Permalink to &quot;üõ†Ô∏è HTTP parameter pollution&quot;">‚Äã</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>A query parameter allows a client to refine researches on a website. It is composed of a key (the parameter name) and a value (what we are requesting).</p><p>With parameter pollution, we enter a query parameter with the same key multiple times. For example, we could have <code>$URL?username=X&amp;username=Y</code>, but which one does a web server choose?<br> In fact, each web servers adopt different behaviors: some of them choose the first parameter, the second parameter, or every parameter.</p><p>This attack could allow an attacker to bypass input validation and WAFs rules, manipulate, access, or retrieve hidden information.</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><h3 id="before-the-attack" tabindex="-1">Before the attack <a class="header-anchor" href="#before-the-attack" aria-label="Permalink to &quot;Before the attack&quot;">‚Äã</a></h3><p><a href="https://github.com/s0md3v/Arjun" target="_blank" rel="noreferrer">Arjun</a> can be used to find HTTP parameters in a website.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arjun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $URL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/endpoint</span></span></code></pre></div><div class="tip custom-block"><p>It&#39;s possible to specify a delay between requests and handle rate limits.<br> Check out the <a href="https://github.com/s0md3v/Arjun/wiki/Usage#scan-a-single-url" target="_blank" rel="noreferrer">GitHub page</a>.</p></div><p>After discovering a few HTTP parameters, one should know the server&#39;s behavior when presented with the same key multiple times.</p><ol><li><p>When presented with a query string in a URL, check the response the server gives with one key.</p><p><code>http://example.com/search=result1</code></p></li><li><p>Repeat the first step with another value (make sure to check the response).</p><p><code>http://example.com/search=result2</code></p></li><li><p>Once you are able to identify what kind of response the server returns for each value, try to combine both and see which one is used.</p><p><code>http://example.com/page?search=result1&amp;search=result2</code></p></li></ol><p>*The result could be a combination of both, giving a new response.</p><p>The payload that would be used to conduct a HPP will depend on the browser&#39;s behavior (found previously).</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">‚Äã</a></h2><p><a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution" target="_blank" rel="noreferrer">https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution</a></p>',16)]))}const m=t(s,[["render",i]]);export{d as __pageData,m as default};
