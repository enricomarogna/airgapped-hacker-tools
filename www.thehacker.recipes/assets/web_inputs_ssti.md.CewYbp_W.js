import{_ as t,c as a,a5 as i,o as s}from"./chunks/framework.B5CpDqM0.js";const m=JSON.parse('{"title":"🛠️ SSTI (Server-Side Template Injection)","description":"","frontmatter":{"authors":"ShutdownRepo, p0dalirius"},"headers":[],"relativePath":"web/inputs/ssti.md","filePath":"web/inputs/ssti.md","lastUpdated":1724982529000}'),n={name:"web/inputs/ssti.md"};function r(o,e,l,p,d,c){return s(),a("div",null,e[0]||(e[0]=[i('<h1 id="🛠️-ssti-server-side-template-injection" tabindex="-1">🛠️ SSTI (Server-Side Template Injection) <a class="header-anchor" href="#🛠️-ssti-server-side-template-injection" aria-label="Permalink to &quot;🛠️ SSTI (Server-Side Template Injection)&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>Some web applications rely on template engines to offer dynamic content. When user inputs are embedded in templates, without proper sensitization, the web apps can be vulnerable to SSTIs (Server-Side Template Injections). This is a critical vulnerability that can sometimes lead to Sensitive Information Disclosure, Local File Disclosure and even RCE (Remote Code Execution).</p><h2 id="🛠️-practice" tabindex="-1">🛠️ Practice <a class="header-anchor" href="#🛠️-practice" aria-label="Permalink to &quot;🛠️ Practice&quot;">​</a></h2><p>Testers need to identify input vectors (parts of the app that accept content from the users) that might be embedded in templates.</p><p>The following payload is used for testing <a href="./../../web/inputs/sqli">SQL injections</a>, <a href="./../../web/inputs/xss">XSS (Cross-Site Scripting)</a> and SSTI (Server-Side Template Injection). The <code>{{7*7}}</code> should be interpreted and changed to <code>49</code> by Jinja2 and Twig engines.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&#39;&quot;&lt;svg/onload=prompt(5);&gt;{{7*7}}</span></span></code></pre></div><p>The following injection methodology can be used to identify the template engine. Is the content modified?</p><p>Depending on the template engine in use, testers will be able to fully exploit the SSTI vulnerability.</p><div class="tip custom-block"><p>Many template engines offer a sandboxed mode for intentional template injection (to offer rich functionalities). A server-side template injection can sometimes be a feature and not a vulnerability.</p></div><p>🛠️ Add some examples ?</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h3 id="ssti-in-jinja2-templates" tabindex="-1">SSTI in jinja2 templates <a class="header-anchor" href="#ssti-in-jinja2-templates" aria-label="Permalink to &quot;SSTI in jinja2 templates&quot;">​</a></h3><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection" target="_blank" rel="noreferrer">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection</a></p><p><a href="https://portswigger.net/research/server-side-template-injection" target="_blank" rel="noreferrer">https://portswigger.net/research/server-side-template-injection</a></p>',16)]))}const u=t(n,[["render",r]]);export{m as __pageData,u as default};
