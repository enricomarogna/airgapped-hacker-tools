import{_ as t,c as a,a5 as o,o as i}from"./chunks/framework.B5CpDqM0.js";const s="/assets/bof-VM.CHa8lB-V.png",b=JSON.parse('{"title":"üõ†Ô∏è Stealth with C2","description":"This technique can be used only after having obtained an initial access on the target","frontmatter":{"description":"This technique can be used only after having obtained an initial access on the target","authors":"Jenaye, ShutdownRepo"},"headers":[],"relativePath":"evasion/av/stealth.md","filePath":"evasion/av/stealth.md","lastUpdated":1725525074000}'),n={name:"evasion/av/stealth.md"};function r(c,e,l,h,d,p){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="üõ†Ô∏è-stealth-with-c2" tabindex="-1">üõ†Ô∏è Stealth with C2 <a class="header-anchor" href="#üõ†Ô∏è-stealth-with-c2" aria-label="Permalink to &quot;üõ†Ô∏è Stealth with C2&quot;">‚Äã</a></h1><div class="warning custom-block"><p>This is a work-in-progress. It&#39;s indicated with the üõ†Ô∏è emoji in the page name or in the category name. Wanna help? Please reach out to me: <a href="https://twitter.com/_nwodtuhs" target="_blank" rel="noreferrer">@_nwodtuhs</a></p></div><h2 id="what-is-a-command-control-c2-reminder" tabindex="-1">What is a Command &amp; Control (C2) Reminder <a class="header-anchor" href="#what-is-a-command-control-c2-reminder" aria-label="Permalink to &quot;What is a Command &amp; Control (C2) Reminder&quot;">‚Äã</a></h2><h2 id="cobalt-havoc" tabindex="-1">Cobalt / Havoc <a class="header-anchor" href="#cobalt-havoc" aria-label="Permalink to &quot;Cobalt / Havoc&quot;">‚Äã</a></h2><p>once you have a shell on the victim, one of the most discreet ways to execute code is through object file because the idea is to avoid creating a sub-process but rather to allocate memory to run code and then resume its initial size.</p><h4 id="object-file" tabindex="-1">Object file <a class="header-anchor" href="#object-file" aria-label="Permalink to &quot;Object file&quot;">‚Äã</a></h4><p>Here is an example of how to launch the BoF (Beacon Object File) once compiled. The source code is available <a href="https://github.com/matro7sh/bof-collection/blob/main/src/checkVM/checkVM2.c" target="_blank" rel="noreferrer">here </a>and the goal is to verify if we are dealing with a virtual machine or not.</p><p><img src="'+s+`" alt=""></p><h4 id="how-to-write-bof-beacon-object-file" tabindex="-1">How to write BoF (Beacon Object File) <a class="header-anchor" href="#how-to-write-bof-beacon-object-file" aria-label="Permalink to &quot;How to write BoF (Beacon Object File)&quot;">‚Äã</a></h4><p>For example, if you need the <code>RegCloseKey</code> function.</p><p>Look at the Windows documentation (in our example <a href="https://learn.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey" target="_blank" rel="noreferrer">https://learn.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey</a>) to get the list of the arguments.</p><p>In our case :</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LSTATUS </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RegCloseKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [in] HKEY hKey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Then, get the name of the library used (at the bottom of the page) in our case it is : <code>Advapi32.lib</code></p><p>We have to structure it like this : <code>DECLSPEC_IMPORT LSTATUS WINAPI $();</code></p><p>Still in our case, we will get this: <code>DECLSPEC_IMPORT LSTATUS WINAPI ADVAPI32$RegCloseKey(HKEY);</code></p><p>Simply use the function like this in our code: <code>ADVAPI32$RegCloseKeyA(hKey);</code></p><div class="tip custom-block"><p>In addition, to use these functions download the library &quot;beacon.h&quot; available <a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/beacon.h" target="_blank" rel="noreferrer">here</a>.</p></div><p>It is also possible to load a library and then call the method using methods like <code>GetProcAddress</code> or <code>LoadLibraryA.</code></p><p>Below is an example of how to use this approach:</p><p><a href="https://github.com/matro7sh/bof-collection/blob/main/src/getAV/getAV-ll.c" target="_blank" rel="noreferrer">https://github.com/matro7sh/bof-collection/blob/main/src/getAV/getAV-ll.c</a></p><p>More information at this URL: <a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm" target="_blank" rel="noreferrer">https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm</a>.</p>`,22)]))}const u=t(n,[["render",r]]);export{b as __pageData,u as default};
