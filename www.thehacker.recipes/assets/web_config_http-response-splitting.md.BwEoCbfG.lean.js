import{_ as t,c as s,a5 as a,o as i}from"./chunks/framework.B5CpDqM0.js";const k=JSON.parse('{"title":"HTTP response splitting","description":"","frontmatter":{"authors":"ShutdownRepo"},"headers":[],"relativePath":"web/config/http-response-splitting.md","filePath":"web/config/http-response-splitting.md","lastUpdated":1724982529000}'),n={name:"web/config/http-response-splitting.md"};function l(o,e,r,p,h,c){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="http-response-splitting" tabindex="-1">HTTP response splitting <a class="header-anchor" href="#http-response-splitting" aria-label="Permalink to &quot;HTTP response splitting&quot;">​</a></h1><h2 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">​</a></h2><p>The HTTP protocol uses CRLF sequences to end headers, lines and so on. When input vectors are reflected in the HTTP responses, if attackers can inject CRLF sequences, they can craft an arbitrary HTTP response. For example, this could lead to reflected XSS as the attackers would have the ability to inject arbitrary HTML content in the response.</p><h2 id="practice" tabindex="-1">Practice <a class="header-anchor" href="#practice" aria-label="Permalink to &quot;Practice&quot;">​</a></h2><p>Testers need to find input vectors that could be reflected in HTTP responses.</p><ul><li>GET or POST parameters (like <code>page</code>, <code>id</code>, <code>language</code>, <code>lang</code>...)</li><li>Cookies</li></ul><p>For example, in the following request line, the GET parameter <code>page</code> is not sanitized enough and a CRLF sequence (<code>%0D%0A</code>) can be injected.</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /index.php?question=answer%0D%0AInjection:%20Pwned%0D%0A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span></code></pre></div><p>The <code>Injection</code> header is then reflected in the HTTP response, right after the legitimate <code>X-Custom-Question</code> header.</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Custom-Question: answer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Injection: Pwned</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>A CRLF injection vulnerable input vector can lead to HTTP response splitting that can in turn lead to</p><ul><li>Reflected XSS</li><li>Redirection</li><li>Sensitive Information Disclosure</li></ul><div class="tip custom-block"><p>Headers are separated with the body by two CRLF sequences (<code>%0D%0A%0D%0A</code>).</p></div><h3 id="reflected-xss" tabindex="-1">Reflected XSS <a class="header-anchor" href="#reflected-xss" aria-label="Permalink to &quot;Reflected XSS&quot;">​</a></h3><p>The following payload injects two headers and a <code>script</code> tag in the body.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>?language=fr%0D%0AContent-Length:%2040%0D%0AContent-Type:%20text/html%0D%0A%0D%0A</span></span></code></pre></div><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources&quot;">​</a></h2><p><a href="https://www.netsparker.com/blog/web-security/crlf-http-header/" target="_blank" rel="noreferrer">https://www.netsparker.com/blog/web-security/crlf-http-header/</a></p><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/CRLF%20Injection/README.md" target="_blank" rel="noreferrer">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/CRLF%20Injection/README.md</a></p>`,19)]))}const g=t(n,[["render",l]]);export{k as __pageData,g as default};
